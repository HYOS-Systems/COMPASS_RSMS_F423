
RSMS_F423.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800589c  0800589c  0001589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a28  08005a28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a30  08005a30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a30  08005a30  00015a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a0  2000000c  08005a44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ac  08005a44  000209ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e7f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031ad  00000000  00000000  00035ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00039068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de0  00000000  00000000  00039fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002445d  00000000  00000000  0003adc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a5c  00000000  00000000  0005f21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1334  00000000  00000000  0006fc79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140fad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dfc  00000000  00000000  00141028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005884 	.word	0x08005884

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005884 	.word	0x08005884

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_CAN3_Init+0x64>)
 800051e:	4a18      	ldr	r2, [pc, #96]	; (8000580 <MX_CAN3_Init+0x68>)
 8000520:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 12;
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_CAN3_Init+0x64>)
 8000524:	220c      	movs	r2, #12
 8000526:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_CAN3_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <MX_CAN3_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_CAN3_Init+0x64>)
 8000536:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800053a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_CAN3_Init+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_CAN3_Init+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_CAN3_Init+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_CAN3_Init+0x64>)
 8000550:	2200      	movs	r2, #0
 8000552:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_CAN3_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_CAN3_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_CAN3_Init+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_CAN3_Init+0x64>)
 8000568:	f000 fd1e 	bl	8000fa8 <HAL_CAN_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_CAN3_Init+0x5e>
  {
    Error_Handler();
 8000572:	f000 f9bf 	bl	80008f4 <Error_Handler>
  }

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000038 	.word	0x20000038
 8000580:	40006c00 	.word	0x40006c00

08000584 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <HAL_CAN_MspInit+0x94>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d134      	bne.n	8000610 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <HAL_CAN_MspInit+0x98>)
 80005ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ae:	4a1b      	ldr	r2, [pc, #108]	; (800061c <HAL_CAN_MspInit+0x98>)
 80005b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005b4:	6413      	str	r3, [r2, #64]	; 0x40
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <HAL_CAN_MspInit+0x98>)
 80005b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_CAN_MspInit+0x98>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a14      	ldr	r2, [pc, #80]	; (800061c <HAL_CAN_MspInit+0x98>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_CAN_MspInit+0x98>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80005de:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80005e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ec:	2303      	movs	r3, #3
 80005ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80005f0:	230b      	movs	r3, #11
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	4809      	ldr	r0, [pc, #36]	; (8000620 <HAL_CAN_MspInit+0x9c>)
 80005fc:	f001 fb02 	bl	8001c04 <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 3, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2103      	movs	r1, #3
 8000604:	204b      	movs	r0, #75	; 0x4b
 8000606:	f001 fac6 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800060a:	204b      	movs	r0, #75	; 0x4b
 800060c:	f001 fadf 	bl	8001bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	; 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40006c00 	.word	0x40006c00
 800061c:	40023800 	.word	0x40023800
 8000620:	40020000 	.word	0x40020000

08000624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b46      	ldr	r3, [pc, #280]	; (8000758 <MX_GPIO_Init+0x134>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a45      	ldr	r2, [pc, #276]	; (8000758 <MX_GPIO_Init+0x134>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b43      	ldr	r3, [pc, #268]	; (8000758 <MX_GPIO_Init+0x134>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	4b3f      	ldr	r3, [pc, #252]	; (8000758 <MX_GPIO_Init+0x134>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a3e      	ldr	r2, [pc, #248]	; (8000758 <MX_GPIO_Init+0x134>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b3c      	ldr	r3, [pc, #240]	; (8000758 <MX_GPIO_Init+0x134>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	4b38      	ldr	r3, [pc, #224]	; (8000758 <MX_GPIO_Init+0x134>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a37      	ldr	r2, [pc, #220]	; (8000758 <MX_GPIO_Init+0x134>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b35      	ldr	r3, [pc, #212]	; (8000758 <MX_GPIO_Init+0x134>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <MX_GPIO_Init+0x134>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a30      	ldr	r2, [pc, #192]	; (8000758 <MX_GPIO_Init+0x134>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <MX_GPIO_Init+0x134>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|CANSTBY_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7104 	mov.w	r1, #528	; 0x210
 80006b0:	482a      	ldr	r0, [pc, #168]	; (800075c <MX_GPIO_Init+0x138>)
 80006b2:	f001 fc39 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD0_GPIO_Port, LD0_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	4829      	ldr	r0, [pc, #164]	; (8000760 <MX_GPIO_Init+0x13c>)
 80006bc:	f001 fc34 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f241 0107 	movw	r1, #4103	; 0x1007
 80006c6:	4827      	ldr	r0, [pc, #156]	; (8000764 <MX_GPIO_Init+0x140>)
 80006c8:	f001 fc2e 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_USR_Pin;
 80006cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <MX_GPIO_Init+0x144>)
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_USR_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	481f      	ldr	r0, [pc, #124]	; (8000760 <MX_GPIO_Init+0x13c>)
 80006e2:	f001 fa8f 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|CANSTBY_Pin;
 80006e6:	f44f 7304 	mov.w	r3, #528	; 0x210
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4817      	ldr	r0, [pc, #92]	; (800075c <MX_GPIO_Init+0x138>)
 8000700:	f001 fa80 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD0_Pin;
 8000704:	2320      	movs	r3, #32
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD0_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4811      	ldr	r0, [pc, #68]	; (8000760 <MX_GPIO_Init+0x13c>)
 800071c:	f001 fa72 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|SPI2_CS_Pin;
 8000720:	f241 0307 	movw	r3, #4103	; 0x1007
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	480a      	ldr	r0, [pc, #40]	; (8000764 <MX_GPIO_Init+0x140>)
 800073a:	f001 fa63 	bl	8001c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2102      	movs	r1, #2
 8000742:	2028      	movs	r0, #40	; 0x28
 8000744:	f001 fa27 	bl	8001b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000748:	2028      	movs	r0, #40	; 0x28
 800074a:	f001 fa40 	bl	8001bce <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3728      	adds	r7, #40	; 0x28
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40020000 	.word	0x40020000
 8000760:	40020800 	.word	0x40020800
 8000764:	40020400 	.word	0x40020400
 8000768:	10110000 	.word	0x10110000

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 fb85 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f833 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f7ff ff53 	bl	8000624 <MX_GPIO_Init>
  MX_CAN3_Init();
 800077e:	f7ff fecb 	bl	8000518 <MX_CAN3_Init>
  MX_SDIO_SD_Init();
 8000782:	f000 f8bb 	bl	80008fc <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000786:	f000 f953 	bl	8000a30 <MX_SPI1_Init>
  MX_SPI2_Init();
 800078a:	f000 f989 	bl	8000aa0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800078e:	f000 fadb 	bl	8000d48 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000792:	f004 fbc3 	bl	8004f1c <MX_FATFS_Init>
		SDFH_writeToFile("\n", 1);
	}
	SDFH_closeFile();
	*/

	uint32_t time = 1000;
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	607b      	str	r3, [r7, #4]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(LD0_GPIO_Port, LD0_Pin);
 800079c:	2120      	movs	r1, #32
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <main+0x6c>)
 80007a0:	f001 fbdb 	bl	8001f5a <HAL_GPIO_TogglePin>
		HAL_Delay(time);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 fbdd 	bl	8000f64 <HAL_Delay>
//		ADS_measure(&adc2);
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007aa:	2101      	movs	r1, #1
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <main+0x70>)
 80007ae:	f001 fbd4 	bl	8001f5a <HAL_GPIO_TogglePin>
		HAL_Delay(time);
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f000 fbd6 	bl	8000f64 <HAL_Delay>
//		ADS_measure(&adc2);
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007b8:	2102      	movs	r1, #2
 80007ba:	4808      	ldr	r0, [pc, #32]	; (80007dc <main+0x70>)
 80007bc:	f001 fbcd 	bl	8001f5a <HAL_GPIO_TogglePin>
		HAL_Delay(time);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 fbcf 	bl	8000f64 <HAL_Delay>
//		ADS_measure(&adc2);
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007c6:	2104      	movs	r1, #4
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <main+0x70>)
 80007ca:	f001 fbc6 	bl	8001f5a <HAL_GPIO_TogglePin>
		HAL_Delay(time);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 fbc8 	bl	8000f64 <HAL_Delay>
		HAL_GPIO_TogglePin(LD0_GPIO_Port, LD0_Pin);
 80007d4:	e7e2      	b.n	800079c <main+0x30>
 80007d6:	bf00      	nop
 80007d8:	40020800 	.word	0x40020800
 80007dc:	40020400 	.word	0x40020400

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0aa      	sub	sp, #168	; 0xa8
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007ea:	2234      	movs	r2, #52	; 0x34
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 f840 	bl	8005874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2258      	movs	r2, #88	; 0x58
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f005 f831 	bl	8005874 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <SystemClock_Config+0x10c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a34      	ldr	r2, [pc, #208]	; (80008ec <SystemClock_Config+0x10c>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b32      	ldr	r3, [pc, #200]	; (80008ec <SystemClock_Config+0x10c>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <SystemClock_Config+0x110>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <SystemClock_Config+0x110>)
 8000838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <SystemClock_Config+0x110>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084a:	2302      	movs	r3, #2
 800084c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084e:	2301      	movs	r3, #1
 8000850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	2310      	movs	r3, #16
 8000856:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	2300      	movs	r3, #0
 8000862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000866:	2308      	movs	r3, #8
 8000868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 192;
 800086c:	23c0      	movs	r3, #192	; 0xc0
 800086e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000872:	2304      	movs	r3, #4
 8000874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000878:	2308      	movs	r3, #8
 800087a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fffd 	bl	8002888 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000894:	f000 f82e 	bl	80008f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2302      	movs	r3, #2
 800089e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008b2:	2101      	movs	r1, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fb8f 	bl	8001fd8 <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008c0:	f000 f818 	bl	80008f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80008c4:	2360      	movs	r3, #96	; 0x60
 80008c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80008c8:	2300      	movs	r3, #0
 80008ca:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fd4b 	bl	8002370 <HAL_RCCEx_PeriphCLKConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x104>
  {
    Error_Handler();
 80008e0:	f000 f808 	bl	80008f4 <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	37a8      	adds	r7, #168	; 0xa8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008fa:	e7fe      	b.n	80008fa <Error_Handler+0x6>

080008fc <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_SDIO_SD_Init+0x38>)
 8000902:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <MX_SDIO_SD_Init+0x3c>)
 8000904:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_SDIO_SD_Init+0x38>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_SDIO_SD_Init+0x38>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_SDIO_SD_Init+0x38>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_SDIO_SD_Init+0x38>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <MX_SDIO_SD_Init+0x38>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 15;
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <MX_SDIO_SD_Init+0x38>)
 8000926:	220f      	movs	r2, #15
 8000928:	619a      	str	r2, [r3, #24]

}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	200003c0 	.word	0x200003c0
 8000938:	40012c00 	.word	0x40012c00

0800093c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a31      	ldr	r2, [pc, #196]	; (8000a20 <HAL_SD_MspInit+0xe4>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d15b      	bne.n	8000a16 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <HAL_SD_MspInit+0xe8>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <HAL_SD_MspInit+0xe8>)
 8000968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <HAL_SD_MspInit+0xe8>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <HAL_SD_MspInit+0xe8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <HAL_SD_MspInit+0xe8>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <HAL_SD_MspInit+0xe8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <HAL_SD_MspInit+0xe8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <HAL_SD_MspInit+0xe8>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <HAL_SD_MspInit+0xe8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80009b2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009c4:	230c      	movs	r3, #12
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4816      	ldr	r0, [pc, #88]	; (8000a28 <HAL_SD_MspInit+0xec>)
 80009d0:	f001 f918 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009e6:	230c      	movs	r3, #12
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <HAL_SD_MspInit+0xec>)
 80009f2:	f001 f907 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009f6:	2304      	movs	r3, #4
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a06:	230c      	movs	r3, #12
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4806      	ldr	r0, [pc, #24]	; (8000a2c <HAL_SD_MspInit+0xf0>)
 8000a12:	f001 f8f7 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40012c00 	.word	0x40012c00
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a36:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <MX_SPI1_Init+0x6c>)
 8000a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a66:	2230      	movs	r2, #48	; 0x30
 8000a68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a7e:	220a      	movs	r2, #10
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a84:	f003 f8de 	bl	8003c44 <HAL_SPI_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000a8e:	f7ff ff31 	bl	80008f4 <Error_Handler>
  }

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000049c 	.word	0x2000049c
 8000a9c:	40013000 	.word	0x40013000

08000aa0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <MX_SPI2_Init+0x6c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000abe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000ad6:	2210      	movs	r2, #16
 8000ad8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000aee:	220a      	movs	r2, #10
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000af4:	f003 f8a6 	bl	8003c44 <HAL_SPI_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000afe:	f7ff fef9 	bl	80008f4 <Error_Handler>
  }

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000444 	.word	0x20000444
 8000b0c:	40003800 	.word	0x40003800

08000b10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a32      	ldr	r2, [pc, #200]	; (8000bf8 <HAL_SPI_MspInit+0xe8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12c      	bne.n	8000b8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	4b31      	ldr	r3, [pc, #196]	; (8000bfc <HAL_SPI_MspInit+0xec>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a30      	ldr	r2, [pc, #192]	; (8000bfc <HAL_SPI_MspInit+0xec>)
 8000b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <HAL_SPI_MspInit+0xec>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <HAL_SPI_MspInit+0xec>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a29      	ldr	r2, [pc, #164]	; (8000bfc <HAL_SPI_MspInit+0xec>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <HAL_SPI_MspInit+0xec>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b6a:	23e0      	movs	r3, #224	; 0xe0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	481e      	ldr	r0, [pc, #120]	; (8000c00 <HAL_SPI_MspInit+0xf0>)
 8000b86:	f001 f83d 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b8a:	e031      	b.n	8000bf0 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <HAL_SPI_MspInit+0xf4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12c      	bne.n	8000bf0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_SPI_MspInit+0xec>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_SPI_MspInit+0xec>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_SPI_MspInit+0xec>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_SPI_MspInit+0xec>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_SPI_MspInit+0xec>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_SPI_MspInit+0xec>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be0:	2305      	movs	r3, #5
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <HAL_SPI_MspInit+0xf8>)
 8000bec:	f001 f80a 	bl	8001c04 <HAL_GPIO_Init>
}
 8000bf0:	bf00      	nop
 8000bf2:	3730      	adds	r7, #48	; 0x30
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40013000 	.word	0x40013000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40003800 	.word	0x40003800
 8000c08:	40020400 	.word	0x40020400

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <NMI_Handler+0x4>

08000c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler+0x4>

08000c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f000 f93c 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	xprintf("UserSwitchInterrupt.\n");
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <EXTI15_10_IRQHandler+0x1c>)
 8000cb6:	f004 fd4b 	bl	8005750 <xprintf>
	CAN3_SendMessage("RSMSmsg.");
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <EXTI15_10_IRQHandler+0x20>)
 8000cbc:	f004 fad2 	bl	8005264 <CAN3_SendMessage>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cc4:	f001 f964 	bl	8001f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	0800589c 	.word	0x0800589c
 8000cd0:	080058b4 	.word	0x080058b4

08000cd4 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupts.
  */
void CAN3_RX0_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */
	xprintf("CAN RX0 Interrupt.\n");
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <CAN3_RX0_IRQHandler+0x38>)
 8000cdc:	f004 fd38 	bl	8005750 <xprintf>
	char buffer[9];
	CAN3_ReceiveMessage(buffer);
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 fb30 	bl	8005348 <CAN3_ReceiveMessage>
	xprintf("Received Message: ");
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <CAN3_RX0_IRQHandler+0x3c>)
 8000cea:	f004 fd31 	bl	8005750 <xprintf>
	xprintf(buffer);
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 fd2d 	bl	8005750 <xprintf>
	xprintf("\n");
 8000cf6:	4807      	ldr	r0, [pc, #28]	; (8000d14 <CAN3_RX0_IRQHandler+0x40>)
 8000cf8:	f004 fd2a 	bl	8005750 <xprintf>

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8000cfc:	4806      	ldr	r0, [pc, #24]	; (8000d18 <CAN3_RX0_IRQHandler+0x44>)
 8000cfe:	f000 fc3b 	bl	8001578 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	080058c0 	.word	0x080058c0
 8000d10:	080058d4 	.word	0x080058d4
 8000d14:	080058e8 	.word	0x080058e8
 8000d18:	20000038 	.word	0x20000038

08000d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <SystemInit+0x28>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <SystemInit+0x28>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SystemInit+0x28>)
 8000d32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d36:	609a      	str	r2, [r3, #8]
#endif
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <MX_USART2_UART_Init+0x50>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d80:	f002 ffc4 	bl	8003d0c <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d8a:	f7ff fdb3 	bl	80008f4 <Error_Handler>
  }

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200004f4 	.word	0x200004f4
 8000d98:	40004400 	.word	0x40004400

08000d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0x84>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d12b      	bne.n	8000e16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000df6:	230c      	movs	r3, #12
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e06:	2307      	movs	r3, #7
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_UART_MspInit+0x8c>)
 8000e12:	f000 fef7 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40004400 	.word	0x40004400
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000e30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e32:	e003      	b.n	8000e3c <LoopCopyDataInit>

08000e34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e3a:	3104      	adds	r1, #4

08000e3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e3c:	480b      	ldr	r0, [pc, #44]	; (8000e6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e44:	d3f6      	bcc.n	8000e34 <CopyDataInit>
  ldr  r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e48:	e002      	b.n	8000e50 <LoopFillZerobss>

08000e4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000e4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e4c:	f842 3b04 	str.w	r3, [r2], #4

08000e50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e54:	d3f9      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e56:	f7ff ff61 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f004 fce7 	bl	800582c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fc85 	bl	800076c <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e64:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000e68:	08005a38 	.word	0x08005a38
  ldr  r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e70:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e74:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e78:	200009ac 	.word	0x200009ac

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fe69 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff feaa 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fe81 	bl	8001bea <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 fe49 	bl	8001b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000534 	.word	0x20000534

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000534 	.word	0x20000534

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_Delay+0x40>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0ed      	b.n	8001196 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff fadc 	bl	8000584 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0202 	bic.w	r2, r2, #2
 8000fda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fdc:	f7ff ffb6 	bl	8000f4c <HAL_GetTick>
 8000fe0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fe2:	e012      	b.n	800100a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fe4:	f7ff ffb2 	bl	8000f4c <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b0a      	cmp	r3, #10
 8000ff0:	d90b      	bls.n	800100a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2205      	movs	r2, #5
 8001002:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e0c5      	b.n	8001196 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e5      	bne.n	8000fe4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001028:	f7ff ff90 	bl	8000f4c <HAL_GetTick>
 800102c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800102e:	e012      	b.n	8001056 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001030:	f7ff ff8c 	bl	8000f4c <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b0a      	cmp	r3, #10
 800103c:	d90b      	bls.n	8001056 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2205      	movs	r2, #5
 800104e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e09f      	b.n	8001196 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0e5      	beq.n	8001030 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7e1b      	ldrb	r3, [r3, #24]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d108      	bne.n	800107e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e007      	b.n	800108e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7e5b      	ldrb	r3, [r3, #25]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d108      	bne.n	80010a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e007      	b.n	80010b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7e9b      	ldrb	r3, [r3, #26]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d108      	bne.n	80010d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0220 	orr.w	r2, r2, #32
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e007      	b.n	80010e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0220 	bic.w	r2, r2, #32
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7edb      	ldrb	r3, [r3, #27]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d108      	bne.n	80010fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0210 	bic.w	r2, r2, #16
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e007      	b.n	800110c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0210 	orr.w	r2, r2, #16
 800110a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7f1b      	ldrb	r3, [r3, #28]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0208 	orr.w	r2, r2, #8
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e007      	b.n	8001136 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0208 	bic.w	r2, r2, #8
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7f5b      	ldrb	r3, [r3, #29]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d108      	bne.n	8001150 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f042 0204 	orr.w	r2, r2, #4
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e007      	b.n	8001160 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0204 	bic.w	r2, r2, #4
 800115e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	ea42 0103 	orr.w	r1, r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	1e5a      	subs	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800119e:	b480      	push	{r7}
 80011a0:	b089      	sub	sp, #36	; 0x24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011bc:	7ffb      	ldrb	r3, [r7, #31]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d003      	beq.n	80011ca <HAL_CAN_AddTxMessage+0x2c>
 80011c2:	7ffb      	ldrb	r3, [r7, #31]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	f040 80b8 	bne.w	800133a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10a      	bne.n	80011ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d105      	bne.n	80011ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80a0 	beq.w	800132a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	0e1b      	lsrs	r3, r3, #24
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d907      	bls.n	800120a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e09e      	b.n	8001348 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800120a:	2201      	movs	r2, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10d      	bne.n	8001238 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001226:	68f9      	ldr	r1, [r7, #12]
 8001228:	6809      	ldr	r1, [r1, #0]
 800122a:	431a      	orrs	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3318      	adds	r3, #24
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	440b      	add	r3, r1
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e00f      	b.n	8001258 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001242:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001248:	68f9      	ldr	r1, [r7, #12]
 800124a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800124c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3318      	adds	r3, #24
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	440b      	add	r3, r1
 8001256:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6819      	ldr	r1, [r3, #0]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3318      	adds	r3, #24
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	440b      	add	r3, r1
 8001268:	3304      	adds	r3, #4
 800126a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	7d1b      	ldrb	r3, [r3, #20]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d111      	bne.n	8001298 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3318      	adds	r3, #24
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	3304      	adds	r3, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	6811      	ldr	r1, [r2, #0]
 8001288:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3318      	adds	r3, #24
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	440b      	add	r3, r1
 8001294:	3304      	adds	r3, #4
 8001296:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3307      	adds	r3, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	061a      	lsls	r2, r3, #24
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3306      	adds	r3, #6
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	041b      	lsls	r3, r3, #16
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3305      	adds	r3, #5
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	4313      	orrs	r3, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	3204      	adds	r2, #4
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	4610      	mov	r0, r2
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	6811      	ldr	r1, [r2, #0]
 80012c0:	ea43 0200 	orr.w	r2, r3, r0
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	440b      	add	r3, r1
 80012ca:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3303      	adds	r3, #3
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	061a      	lsls	r2, r3, #24
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3302      	adds	r3, #2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	041b      	lsls	r3, r3, #16
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3301      	adds	r3, #1
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	4313      	orrs	r3, r2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	4610      	mov	r0, r2
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	6811      	ldr	r1, [r2, #0]
 80012f6:	ea43 0200 	orr.w	r2, r3, r0
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	440b      	add	r3, r1
 8001300:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001304:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3318      	adds	r3, #24
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	4413      	add	r3, r2
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	6811      	ldr	r1, [r2, #0]
 8001318:	f043 0201 	orr.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3318      	adds	r3, #24
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	440b      	add	r3, r1
 8001324:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e00e      	b.n	8001348 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e006      	b.n	8001348 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
  }
}
 8001348:	4618      	mov	r0, r3
 800134a:	3724      	adds	r7, #36	; 0x24
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001368:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d003      	beq.n	8001378 <HAL_CAN_GetRxMessage+0x24>
 8001370:	7dfb      	ldrb	r3, [r7, #23]
 8001372:	2b02      	cmp	r3, #2
 8001374:	f040 80f3 	bne.w	800155e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10e      	bne.n	800139c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d116      	bne.n	80013ba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0e7      	b.n	800156c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d107      	bne.n	80013ba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0d8      	b.n	800156c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	331b      	adds	r3, #27
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	4413      	add	r3, r2
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0204 	and.w	r2, r3, #4
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10c      	bne.n	80013f2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	331b      	adds	r3, #27
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	0d5b      	lsrs	r3, r3, #21
 80013e8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	e00b      	b.n	800140a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	331b      	adds	r3, #27
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	4413      	add	r3, r2
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	331b      	adds	r3, #27
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0202 	and.w	r2, r3, #2
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	331b      	adds	r3, #27
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	4413      	add	r3, r2
 800142c:	3304      	adds	r3, #4
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 020f 	and.w	r2, r3, #15
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	331b      	adds	r3, #27
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4413      	add	r3, r2
 8001444:	3304      	adds	r3, #4
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	b2da      	uxtb	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	331b      	adds	r3, #27
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4413      	add	r3, r2
 800145c:	3304      	adds	r3, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0c1b      	lsrs	r3, r3, #16
 8001462:	b29a      	uxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4413      	add	r3, r2
 8001472:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	4413      	add	r3, r2
 8001488:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	0a1a      	lsrs	r2, r3, #8
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4413      	add	r3, r2
 80014a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	0c1a      	lsrs	r2, r3, #16
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	3302      	adds	r3, #2
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0e1a      	lsrs	r2, r3, #24
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3303      	adds	r3, #3
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	3304      	adds	r3, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	0a1a      	lsrs	r2, r3, #8
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	3305      	adds	r3, #5
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	4413      	add	r3, r2
 8001508:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	0c1a      	lsrs	r2, r3, #16
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3306      	adds	r3, #6
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	4413      	add	r3, r2
 8001522:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0e1a      	lsrs	r2, r3, #24
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	3307      	adds	r3, #7
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d108      	bne.n	800154a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0220 	orr.w	r2, r2, #32
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	e007      	b.n	800155a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0220 	orr.w	r2, r2, #32
 8001558:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e006      	b.n	800156c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
  }
}
 800156c:	4618      	mov	r0, r3
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d07c      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d023      	beq.n	8001610 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2201      	movs	r2, #1
 80015ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f97d 	bl	80018da <HAL_CAN_TxMailbox0CompleteCallback>
 80015e0:	e016      	b.n	8001610 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
 80015f4:	e00c      	b.n	8001610 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
 8001608:	e002      	b.n	8001610 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f983 	bl	8001916 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d024      	beq.n	8001664 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001622:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f95d 	bl	80018ee <HAL_CAN_TxMailbox1CompleteCallback>
 8001634:	e016      	b.n	8001664 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	e00c      	b.n	8001664 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
 800165c:	e002      	b.n	8001664 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f963 	bl	800192a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d024      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001676:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f93d 	bl	8001902 <HAL_CAN_TxMailbox2CompleteCallback>
 8001688:	e016      	b.n	80016b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
 800169c:	e00c      	b.n	80016b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
 80016b0:	e002      	b.n	80016b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f943 	bl	800193e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00c      	beq.n	80016dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2210      	movs	r2, #16
 80016da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00b      	beq.n	80016fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2208      	movs	r2, #8
 80016f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f934 	bl	8001966 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d009      	beq.n	800171c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f91b 	bl	8001952 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00c      	beq.n	8001740 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001736:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2210      	movs	r2, #16
 800173e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2208      	movs	r2, #8
 800175a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f916 	bl	800198e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b00      	cmp	r3, #0
 800176a:	d009      	beq.n	8001780 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8fd 	bl	800197a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2210      	movs	r2, #16
 800179a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f900 	bl	80019a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00b      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2208      	movs	r2, #8
 80017bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f8f9 	bl	80019b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d075      	beq.n	80018ba <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d06c      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d008      	beq.n	80017f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d008      	beq.n	8001810 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001832:	2b00      	cmp	r3, #0
 8001834:	d03d      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800183c:	2b00      	cmp	r3, #0
 800183e:	d038      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001846:	2b30      	cmp	r3, #48	; 0x30
 8001848:	d017      	beq.n	800187a <HAL_CAN_IRQHandler+0x302>
 800184a:	2b30      	cmp	r3, #48	; 0x30
 800184c:	d804      	bhi.n	8001858 <HAL_CAN_IRQHandler+0x2e0>
 800184e:	2b10      	cmp	r3, #16
 8001850:	d009      	beq.n	8001866 <HAL_CAN_IRQHandler+0x2ee>
 8001852:	2b20      	cmp	r3, #32
 8001854:	d00c      	beq.n	8001870 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001856:	e024      	b.n	80018a2 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001858:	2b50      	cmp	r3, #80	; 0x50
 800185a:	d018      	beq.n	800188e <HAL_CAN_IRQHandler+0x316>
 800185c:	2b60      	cmp	r3, #96	; 0x60
 800185e:	d01b      	beq.n	8001898 <HAL_CAN_IRQHandler+0x320>
 8001860:	2b40      	cmp	r3, #64	; 0x40
 8001862:	d00f      	beq.n	8001884 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001864:	e01d      	b.n	80018a2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f043 0308 	orr.w	r3, r3, #8
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800186e:	e018      	b.n	80018a2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001878:	e013      	b.n	80018a2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	f043 0320 	orr.w	r3, r3, #32
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001882:	e00e      	b.n	80018a2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800188c:	e009      	b.n	80018a2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001896:	e004      	b.n	80018a2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699a      	ldr	r2, [r3, #24]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2204      	movs	r2, #4
 80018b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f87c 	bl	80019ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f7ff ff8e 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff29 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba8:	f7ff ff3e 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff ff8e 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff5d 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff31 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffa2 	bl	8001b3c <SysTick_Config>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	e165      	b.n	8001eec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c20:	2201      	movs	r2, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f040 8154 	bne.w	8001ee6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d00b      	beq.n	8001c5e <HAL_GPIO_Init+0x5a>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c52:	2b11      	cmp	r3, #17
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d130      	bne.n	8001cc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 0201 	and.w	r2, r3, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0xfc>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b12      	cmp	r3, #18
 8001cfe:	d123      	bne.n	8001d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	08da      	lsrs	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3208      	adds	r2, #8
 8001d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	220f      	movs	r2, #15
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	08da      	lsrs	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3208      	adds	r2, #8
 8001d42:	69b9      	ldr	r1, [r7, #24]
 8001d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80ae 	beq.w	8001ee6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b5c      	ldr	r3, [pc, #368]	; (8001f00 <HAL_GPIO_Init+0x2fc>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a5b      	ldr	r2, [pc, #364]	; (8001f00 <HAL_GPIO_Init+0x2fc>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b59      	ldr	r3, [pc, #356]	; (8001f00 <HAL_GPIO_Init+0x2fc>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da6:	4a57      	ldr	r2, [pc, #348]	; (8001f04 <HAL_GPIO_Init+0x300>)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4e      	ldr	r2, [pc, #312]	; (8001f08 <HAL_GPIO_Init+0x304>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d025      	beq.n	8001e1e <HAL_GPIO_Init+0x21a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4d      	ldr	r2, [pc, #308]	; (8001f0c <HAL_GPIO_Init+0x308>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01f      	beq.n	8001e1a <HAL_GPIO_Init+0x216>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4c      	ldr	r2, [pc, #304]	; (8001f10 <HAL_GPIO_Init+0x30c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d019      	beq.n	8001e16 <HAL_GPIO_Init+0x212>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4b      	ldr	r2, [pc, #300]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0x20e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4a      	ldr	r2, [pc, #296]	; (8001f18 <HAL_GPIO_Init+0x314>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00d      	beq.n	8001e0e <HAL_GPIO_Init+0x20a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a49      	ldr	r2, [pc, #292]	; (8001f1c <HAL_GPIO_Init+0x318>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <HAL_GPIO_Init+0x206>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <HAL_GPIO_Init+0x31c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_GPIO_Init+0x202>
 8001e02:	2306      	movs	r3, #6
 8001e04:	e00c      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e06:	2307      	movs	r3, #7
 8001e08:	e00a      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e30:	4934      	ldr	r1, [pc, #208]	; (8001f04 <HAL_GPIO_Init+0x300>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3e:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e62:	4a30      	ldr	r2, [pc, #192]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e68:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8c:	4a25      	ldr	r2, [pc, #148]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e92:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb6:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee0:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f ae96 	bls.w	8001c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3724      	adds	r7, #36	; 0x24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	40013c00 	.word	0x40013c00

08001f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
 8001f34:	4613      	mov	r3, r2
 8001f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f38:	787b      	ldrb	r3, [r7, #1]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f44:	e003      	b.n	8001f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	041a      	lsls	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	619a      	str	r2, [r3, #24]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	887b      	ldrh	r3, [r7, #2]
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d104      	bne.n	8001f7e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f74:	887b      	ldrh	r3, [r7, #2]
 8001f76:	041a      	lsls	r2, r3, #16
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	619a      	str	r2, [r3, #24]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f806 	bl	8001fc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0cc      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b68      	ldr	r3, [pc, #416]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d90c      	bls.n	8002014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b65      	ldr	r3, [pc, #404]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b63      	ldr	r3, [pc, #396]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0b8      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d020      	beq.n	8002062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800202c:	4b59      	ldr	r3, [pc, #356]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a58      	ldr	r2, [pc, #352]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002044:	4b53      	ldr	r3, [pc, #332]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a52      	ldr	r2, [pc, #328]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800204e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002050:	4b50      	ldr	r3, [pc, #320]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	494d      	ldr	r1, [pc, #308]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d044      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b47      	ldr	r3, [pc, #284]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d119      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e07f      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d003      	beq.n	8002096 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002092:	2b03      	cmp	r3, #3
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	4b3f      	ldr	r3, [pc, #252]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e06f      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e067      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b6:	4b37      	ldr	r3, [pc, #220]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f023 0203 	bic.w	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4934      	ldr	r1, [pc, #208]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c8:	f7fe ff40 	bl	8000f4c <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d0:	f7fe ff3c 	bl	8000f4c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e04f      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 020c 	and.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1eb      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d20c      	bcs.n	8002120 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b22      	ldr	r3, [pc, #136]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e032      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4916      	ldr	r1, [pc, #88]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	490e      	ldr	r1, [pc, #56]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800215e:	f000 f821 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8002162:	4601      	mov	r1, r0
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	fa21 f303 	lsr.w	r3, r1, r3
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fea0 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00
 8002194:	40023800 	.word	0x40023800
 8002198:	080059fc 	.word	0x080059fc
 800219c:	20000000 	.word	0x20000000
 80021a0:	20000004 	.word	0x20000004

080021a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	2300      	movs	r3, #0
 80021b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ba:	4b50      	ldr	r3, [pc, #320]	; (80022fc <HAL_RCC_GetSysClockFreq+0x158>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d007      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x32>
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d008      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x38>
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 808d 	bne.w	80022ea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d0:	4b4b      	ldr	r3, [pc, #300]	; (8002300 <HAL_RCC_GetSysClockFreq+0x15c>)
 80021d2:	60bb      	str	r3, [r7, #8]
       break;
 80021d4:	e08c      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021d6:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <HAL_RCC_GetSysClockFreq+0x160>)
 80021d8:	60bb      	str	r3, [r7, #8]
      break;
 80021da:	e089      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021dc:	4b47      	ldr	r3, [pc, #284]	; (80022fc <HAL_RCC_GetSysClockFreq+0x158>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021e6:	4b45      	ldr	r3, [pc, #276]	; (80022fc <HAL_RCC_GetSysClockFreq+0x158>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d023      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f2:	4b42      	ldr	r3, [pc, #264]	; (80022fc <HAL_RCC_GetSysClockFreq+0x158>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	099b      	lsrs	r3, r3, #6
 80021f8:	f04f 0400 	mov.w	r4, #0
 80021fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	ea03 0501 	and.w	r5, r3, r1
 8002208:	ea04 0602 	and.w	r6, r4, r2
 800220c:	4a3d      	ldr	r2, [pc, #244]	; (8002304 <HAL_RCC_GetSysClockFreq+0x160>)
 800220e:	fb02 f106 	mul.w	r1, r2, r6
 8002212:	2200      	movs	r2, #0
 8002214:	fb02 f205 	mul.w	r2, r2, r5
 8002218:	440a      	add	r2, r1
 800221a:	493a      	ldr	r1, [pc, #232]	; (8002304 <HAL_RCC_GetSysClockFreq+0x160>)
 800221c:	fba5 0101 	umull	r0, r1, r5, r1
 8002220:	1853      	adds	r3, r2, r1
 8002222:	4619      	mov	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f04f 0400 	mov.w	r4, #0
 800222a:	461a      	mov	r2, r3
 800222c:	4623      	mov	r3, r4
 800222e:	f7fd fff3 	bl	8000218 <__aeabi_uldivmod>
 8002232:	4603      	mov	r3, r0
 8002234:	460c      	mov	r4, r1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e049      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223a:	4b30      	ldr	r3, [pc, #192]	; (80022fc <HAL_RCC_GetSysClockFreq+0x158>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	099b      	lsrs	r3, r3, #6
 8002240:	f04f 0400 	mov.w	r4, #0
 8002244:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	ea03 0501 	and.w	r5, r3, r1
 8002250:	ea04 0602 	and.w	r6, r4, r2
 8002254:	4629      	mov	r1, r5
 8002256:	4632      	mov	r2, r6
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	f04f 0400 	mov.w	r4, #0
 8002260:	0154      	lsls	r4, r2, #5
 8002262:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002266:	014b      	lsls	r3, r1, #5
 8002268:	4619      	mov	r1, r3
 800226a:	4622      	mov	r2, r4
 800226c:	1b49      	subs	r1, r1, r5
 800226e:	eb62 0206 	sbc.w	r2, r2, r6
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	f04f 0400 	mov.w	r4, #0
 800227a:	0194      	lsls	r4, r2, #6
 800227c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002280:	018b      	lsls	r3, r1, #6
 8002282:	1a5b      	subs	r3, r3, r1
 8002284:	eb64 0402 	sbc.w	r4, r4, r2
 8002288:	f04f 0100 	mov.w	r1, #0
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	00e2      	lsls	r2, r4, #3
 8002292:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002296:	00d9      	lsls	r1, r3, #3
 8002298:	460b      	mov	r3, r1
 800229a:	4614      	mov	r4, r2
 800229c:	195b      	adds	r3, r3, r5
 800229e:	eb44 0406 	adc.w	r4, r4, r6
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	02a2      	lsls	r2, r4, #10
 80022ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022b0:	0299      	lsls	r1, r3, #10
 80022b2:	460b      	mov	r3, r1
 80022b4:	4614      	mov	r4, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	4621      	mov	r1, r4
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f04f 0400 	mov.w	r4, #0
 80022c0:	461a      	mov	r2, r3
 80022c2:	4623      	mov	r3, r4
 80022c4:	f7fd ffa8 	bl	8000218 <__aeabi_uldivmod>
 80022c8:	4603      	mov	r3, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_GetSysClockFreq+0x158>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	0c1b      	lsrs	r3, r3, #16
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	3301      	adds	r3, #1
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	60bb      	str	r3, [r7, #8]
      break;
 80022e8:	e002      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ea:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_RCC_GetSysClockFreq+0x15c>)
 80022ec:	60bb      	str	r3, [r7, #8]
      break;
 80022ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f0:	68bb      	ldr	r3, [r7, #8]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	00f42400 	.word	0x00f42400
 8002304:	017d7840 	.word	0x017d7840

08002308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <HAL_RCC_GetHCLKFreq+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000000 	.word	0x20000000

08002320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002324:	f7ff fff0 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002328:	4601      	mov	r1, r0
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	0a9b      	lsrs	r3, r3, #10
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4a03      	ldr	r2, [pc, #12]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	fa21 f303 	lsr.w	r3, r1, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	08005a0c 	.word	0x08005a0c

08002348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800234c:	f7ff ffdc 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002350:	4601      	mov	r1, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	0b5b      	lsrs	r3, r3, #13
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4a03      	ldr	r2, [pc, #12]	; (800236c <HAL_RCC_GetPCLK2Freq+0x24>)
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	08005a0c 	.word	0x08005a0c

08002370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d010      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002394:	4b7a      	ldr	r3, [pc, #488]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800239a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	4977      	ldr	r1, [pc, #476]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80023b2:	2301      	movs	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d010      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80023c2:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80023c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023c8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	496b      	ldr	r1, [pc, #428]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80023e0:	2301      	movs	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d022      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80023f0:	4b63      	ldr	r3, [pc, #396]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80023f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fe:	4960      	ldr	r1, [pc, #384]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800240e:	2301      	movs	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800241a:	d10c      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800241c:	4b58      	ldr	r3, [pc, #352]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800241e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002422:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	3b01      	subs	r3, #1
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	4954      	ldr	r1, [pc, #336]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d022      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8002442:	4b4f      	ldr	r3, [pc, #316]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002448:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	494b      	ldr	r1, [pc, #300]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002460:	2301      	movs	r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800246c:	d10c      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800246e:	4b44      	ldr	r3, [pc, #272]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002474:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	3b01      	subs	r3, #1
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	493f      	ldr	r1, [pc, #252]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 808a 	beq.w	80025aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a38      	ldr	r2, [pc, #224]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80024b2:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a33      	ldr	r2, [pc, #204]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024be:	f7fe fd45 	bl	8000f4c <HAL_GetTick>
 80024c2:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024c6:	f7fe fd41 	bl	8000f4c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1d1      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024d8:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ec:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02f      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d028      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002502:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800250a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800251e:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d114      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe fd0f 	bl	8000f4c <HAL_GetTick>
 800252e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	e00a      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe fd0b 	bl	8000f4c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e199      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ee      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002560:	d114      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002576:	4902      	ldr	r1, [pc, #8]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]
 800257c:	e00c      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40007000 	.word	0x40007000
 8002588:	42470e40 	.word	0x42470e40
 800258c:	4b89      	ldr	r3, [pc, #548]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a88      	ldr	r2, [pc, #544]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002592:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002596:	6093      	str	r3, [r2, #8]
 8002598:	4b86      	ldr	r3, [pc, #536]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800259a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80025bc:	4b7e      	ldr	r3, [pc, #504]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80025be:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80025cc:	4b79      	ldr	r3, [pc, #484]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	4976      	ldr	r1, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d011      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025ee:	4b71      	ldr	r3, [pc, #452]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80025f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	496d      	ldr	r1, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800260c:	d101      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800260e:	2301      	movs	r3, #1
 8002610:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002624:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d004      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	f040 80c6 	bne.w	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002644:	4b5d      	ldr	r3, [pc, #372]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800264a:	f7fe fc7f 	bl	8000f4c <HAL_GetTick>
 800264e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002652:	f7fe fc7b 	bl	8000f4c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e10b      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002670:	4a53      	ldr	r2, [pc, #332]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002676:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d023      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d019      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b4:	d00e      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d019      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d115      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d2:	d110      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	019b      	lsls	r3, r3, #6
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	071b      	lsls	r3, r3, #28
 80026ee:	4931      	ldr	r1, [pc, #196]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002712:	2b00      	cmp	r3, #0
 8002714:	d026      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d122      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800271e:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002724:	0e1b      	lsrs	r3, r3, #24
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	019b      	lsls	r3, r3, #6
 8002736:	431a      	orrs	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	071b      	lsls	r3, r3, #28
 8002744:	491b      	ldr	r1, [pc, #108]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800274e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002752:	f023 021f 	bic.w	r2, r3, #31
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	3b01      	subs	r3, #1
 800275c:	4915      	ldr	r1, [pc, #84]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276c:	2b00      	cmp	r3, #0
 800276e:	d010      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	071b      	lsls	r3, r3, #28
 800278a:	490a      	ldr	r1, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002794:	2201      	movs	r2, #1
 8002796:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002798:	f7fe fbd8 	bl	8000f4c <HAL_GetTick>
 800279c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800279e:	e011      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027a0:	f7fe fbd4 	bl	8000f4c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d90a      	bls.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e064      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
 80027b8:	424711e0 	.word	0x424711e0
 80027bc:	42470068 	.word	0x42470068
 80027c0:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027c4:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0e7      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027dc:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80027de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ea:	4926      	ldr	r1, [pc, #152]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80027fe:	4b21      	ldr	r3, [pc, #132]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002804:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	491d      	ldr	r1, [pc, #116]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8002820:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002826:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	4915      	ldr	r1, [pc, #84]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002848:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	490c      	ldr	r1, [pc, #48]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800286a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4904      	ldr	r1, [pc, #16]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d075      	beq.n	800298c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028a0:	4ba2      	ldr	r3, [pc, #648]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d00c      	beq.n	80028c6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ac:	4b9f      	ldr	r3, [pc, #636]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d112      	bne.n	80028de <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b8:	4b9c      	ldr	r3, [pc, #624]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c4:	d10b      	bne.n	80028de <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c6:	4b99      	ldr	r3, [pc, #612]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d05b      	beq.n	800298a <HAL_RCC_OscConfig+0x102>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d157      	bne.n	800298a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e20b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x6e>
 80028e8:	4b90      	ldr	r3, [pc, #576]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a8f      	ldr	r2, [pc, #572]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	e01d      	b.n	8002932 <HAL_RCC_OscConfig+0xaa>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fe:	d10c      	bne.n	800291a <HAL_RCC_OscConfig+0x92>
 8002900:	4b8a      	ldr	r3, [pc, #552]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a89      	ldr	r2, [pc, #548]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002906:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b87      	ldr	r3, [pc, #540]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a86      	ldr	r2, [pc, #536]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e00b      	b.n	8002932 <HAL_RCC_OscConfig+0xaa>
 800291a:	4b84      	ldr	r3, [pc, #528]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a83      	ldr	r2, [pc, #524]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b81      	ldr	r3, [pc, #516]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a80      	ldr	r2, [pc, #512]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 800292c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d013      	beq.n	8002962 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fe fb07 	bl	8000f4c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002942:	f7fe fb03 	bl	8000f4c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b64      	cmp	r3, #100	; 0x64
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e1d0      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002954:	4b75      	ldr	r3, [pc, #468]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0xba>
 8002960:	e014      	b.n	800298c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7fe faf3 	bl	8000f4c <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800296a:	f7fe faef 	bl	8000f4c <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b64      	cmp	r3, #100	; 0x64
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1bc      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297c:	4b6b      	ldr	r3, [pc, #428]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0xe2>
 8002988:	e000      	b.n	800298c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d063      	beq.n	8002a60 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002998:	4b64      	ldr	r3, [pc, #400]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a4:	4b61      	ldr	r3, [pc, #388]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d11c      	bne.n	80029ea <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b0:	4b5e      	ldr	r3, [pc, #376]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d116      	bne.n	80029ea <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029bc:	4b5b      	ldr	r3, [pc, #364]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_OscConfig+0x14c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e190      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b55      	ldr	r3, [pc, #340]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4952      	ldr	r1, [pc, #328]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e8:	e03a      	b.n	8002a60 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d020      	beq.n	8002a34 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f2:	4b4f      	ldr	r3, [pc, #316]	; (8002b30 <HAL_RCC_OscConfig+0x2a8>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe faa8 	bl	8000f4c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a00:	f7fe faa4 	bl	8000f4c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e171      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b46      	ldr	r3, [pc, #280]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	4b43      	ldr	r3, [pc, #268]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	493f      	ldr	r1, [pc, #252]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
 8002a32:	e015      	b.n	8002a60 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a34:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <HAL_RCC_OscConfig+0x2a8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fa87 	bl	8000f4c <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a42:	f7fe fa83 	bl	8000f4c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e150      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a54:	4b35      	ldr	r3, [pc, #212]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d030      	beq.n	8002ace <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d016      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a74:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <HAL_RCC_OscConfig+0x2ac>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fa67 	bl	8000f4c <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a82:	f7fe fa63 	bl	8000f4c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e130      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a94:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1fa>
 8002aa0:	e015      	b.n	8002ace <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fa50 	bl	8000f4c <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab0:	f7fe fa4c 	bl	8000f4c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e119      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 809f 	beq.w	8002c1a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002adc:	2300      	movs	r3, #0
 8002ade:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10f      	bne.n	8002b0c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afa:	6413      	str	r3, [r2, #64]	; 0x40
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_RCC_OscConfig+0x2b0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d120      	bne.n	8002b5a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b18:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <HAL_RCC_OscConfig+0x2b0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a06      	ldr	r2, [pc, #24]	; (8002b38 <HAL_RCC_OscConfig+0x2b0>)
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b24:	f7fe fa12 	bl	8000f4c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	e010      	b.n	8002b4e <HAL_RCC_OscConfig+0x2c6>
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	42470000 	.word	0x42470000
 8002b34:	42470e80 	.word	0x42470e80
 8002b38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3c:	f7fe fa06 	bl	8000f4c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0d3      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <HAL_RCC_OscConfig+0x478>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d106      	bne.n	8002b70 <HAL_RCC_OscConfig+0x2e8>
 8002b62:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	4a67      	ldr	r2, [pc, #412]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6e:	e01c      	b.n	8002baa <HAL_RCC_OscConfig+0x322>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x30a>
 8002b78:	4b62      	ldr	r3, [pc, #392]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	4a61      	ldr	r2, [pc, #388]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	6713      	str	r3, [r2, #112]	; 0x70
 8002b84:	4b5f      	ldr	r3, [pc, #380]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a5e      	ldr	r2, [pc, #376]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	e00b      	b.n	8002baa <HAL_RCC_OscConfig+0x322>
 8002b92:	4b5c      	ldr	r3, [pc, #368]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a5b      	ldr	r2, [pc, #364]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9e:	4b59      	ldr	r3, [pc, #356]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a58      	ldr	r2, [pc, #352]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d015      	beq.n	8002bde <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe f9cb 	bl	8000f4c <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fe f9c7 	bl	8000f4c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e092      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	4b4c      	ldr	r3, [pc, #304]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ee      	beq.n	8002bba <HAL_RCC_OscConfig+0x332>
 8002bdc:	e014      	b.n	8002c08 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe f9b5 	bl	8000f4c <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7fe f9b1 	bl	8000f4c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e07c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfc:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ee      	bne.n	8002be6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a3c      	ldr	r2, [pc, #240]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d068      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c22:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d060      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d145      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_OscConfig+0x480>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe f986 	bl	8000f4c <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe f982 	bl	8000f4c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e04f      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	019b      	lsls	r3, r3, #6
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	071b      	lsls	r3, r3, #28
 8002c8e:	491d      	ldr	r1, [pc, #116]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c94:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_RCC_OscConfig+0x480>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7fe f957 	bl	8000f4c <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe f953 	bl	8000f4c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e020      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x41a>
 8002cc0:	e018      	b.n	8002cf4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_RCC_OscConfig+0x480>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe f940 	bl	8000f4c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe f93c 	bl	8000f4c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e009      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_RCC_OscConfig+0x47c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x448>
 8002cee:	e001      	b.n	8002cf4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40007000 	.word	0x40007000
 8002d04:	40023800 	.word	0x40023800
 8002d08:	42470060 	.word	0x42470060

08002d0c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e022      	b.n	8002d64 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7fd fe03 	bl	800093c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2203      	movs	r2, #3
 8002d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f814 	bl	8002d6c <HAL_SD_InitCard>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00a      	b.n	8002d64 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	b08e      	sub	sp, #56	; 0x38
 8002d70:	af04      	add	r7, sp, #16
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002d88:	2376      	movs	r3, #118	; 0x76
 8002d8a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681d      	ldr	r5, [r3, #0]
 8002d90:	466c      	mov	r4, sp
 8002d92:	f107 0314 	add.w	r3, r7, #20
 8002d96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d9e:	f107 0308 	add.w	r3, r7, #8
 8002da2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da4:	4628      	mov	r0, r5
 8002da6:	f001 fb97 	bl	80044d8 <SDIO_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e031      	b.n	8002e20 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_SD_InitCard+0xbc>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 fbcf 	bl	800456a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002dcc:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_SD_InitCard+0xbc>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fe80 	bl	8003ad8 <SD_PowerON>
 8002dd8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e013      	b.n	8002e20 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fd9f 	bl	800393c <SD_InitCard>
 8002dfe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3728      	adds	r7, #40	; 0x28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bdb0      	pop	{r4, r5, r7, pc}
 8002e28:	422580a0 	.word	0x422580a0

08002e2c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b092      	sub	sp, #72	; 0x48
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002e3a:	f7fe f887 	bl	8000f4c <HAL_GetTick>
 8002e3e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e1d7      	b.n	800320e <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	f040 81ca 	bne.w	8003200 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	441a      	add	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d907      	bls.n	8002e90 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e1be      	b.n	800320e <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2203      	movs	r2, #3
 8002e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d002      	beq.n	8002eae <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eaa:	025b      	lsls	r3, r3, #9
 8002eac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 fbea 	bl	8004690 <SDMMC_CmdBlockLength>
 8002ebc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00f      	beq.n	8002ee4 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a9a      	ldr	r2, [pc, #616]	; (8003134 <HAL_SD_ReadBlocks+0x308>)
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e194      	b.n	800320e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	025b      	lsls	r3, r3, #9
 8002eee:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ef0:	2390      	movs	r3, #144	; 0x90
 8002ef2:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002efc:	2301      	movs	r3, #1
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f107 0214 	add.w	r2, r7, #20
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 fb94 	bl	8004638 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d90a      	bls.n	8002f2c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 fbf8 	bl	8004718 <SDMMC_CmdReadMultiBlock>
 8002f28:	6478      	str	r0, [r7, #68]	; 0x44
 8002f2a:	e009      	b.n	8002f40 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 fbcb 	bl	80046d4 <SDMMC_CmdReadSingleBlock>
 8002f3e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d012      	beq.n	8002f6c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a7a      	ldr	r2, [pc, #488]	; (8003134 <HAL_SD_ReadBlocks+0x308>)
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e150      	b.n	800320e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002f70:	e061      	b.n	8003036 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d03c      	beq.n	8002ffa <HAL_SD_ReadBlocks+0x1ce>
 8002f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d039      	beq.n	8002ffa <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	643b      	str	r3, [r7, #64]	; 0x40
 8002f8a:	e033      	b.n	8002ff4 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f001 facc 	bl	800452e <SDIO_ReadFIFO>
 8002f96:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb8:	3301      	adds	r3, #1
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fca:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fce:	3301      	adds	r3, #1
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	0e1b      	lsrs	r3, r3, #24
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fea:	3b01      	subs	r3, #1
 8002fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff6:	2b07      	cmp	r3, #7
 8002ff8:	d9c8      	bls.n	8002f8c <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002ffa:	f7fd ffa7 	bl	8000f4c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003006:	429a      	cmp	r2, r3
 8003008:	d902      	bls.n	8003010 <HAL_SD_ReadBlocks+0x1e4>
 800300a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300c:	2b00      	cmp	r3, #0
 800300e:	d112      	bne.n	8003036 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a47      	ldr	r2, [pc, #284]	; (8003134 <HAL_SD_ReadBlocks+0x308>)
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e0eb      	b.n	800320e <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003040:	2b00      	cmp	r3, #0
 8003042:	d096      	beq.n	8002f72 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d022      	beq.n	8003098 <HAL_SD_ReadBlocks+0x26c>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d91f      	bls.n	8003098 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	2b03      	cmp	r3, #3
 800305e:	d01b      	beq.n	8003098 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f001 fbbd 	bl	80047e4 <SDMMC_CmdStopTransfer>
 800306a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800306c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306e:	2b00      	cmp	r3, #0
 8003070:	d012      	beq.n	8003098 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2f      	ldr	r2, [pc, #188]	; (8003134 <HAL_SD_ReadBlocks+0x308>)
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800307e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003080:	431a      	orrs	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0ba      	b.n	800320e <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d012      	beq.n	80030cc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a22      	ldr	r2, [pc, #136]	; (8003134 <HAL_SD_ReadBlocks+0x308>)
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	f043 0208 	orr.w	r2, r3, #8
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0a0      	b.n	800320e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a15      	ldr	r2, [pc, #84]	; (8003134 <HAL_SD_ReadBlocks+0x308>)
 80030e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	f043 0202 	orr.w	r2, r3, #2
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e086      	b.n	800320e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d063      	beq.n	80031d6 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <HAL_SD_ReadBlocks+0x308>)
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e06c      	b.n	800320e <HAL_SD_ReadBlocks+0x3e2>
 8003134:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f001 f9f6 	bl	800452e <SDIO_ReadFIFO>
 8003142:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	b2da      	uxtb	r2, r3
 8003148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314e:	3301      	adds	r3, #1
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003154:	3b01      	subs	r3, #1
 8003156:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	b2da      	uxtb	r2, r3
 800315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003160:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003164:	3301      	adds	r3, #1
 8003166:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316a:	3b01      	subs	r3, #1
 800316c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	b2da      	uxtb	r2, r3
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317a:	3301      	adds	r3, #1
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003180:	3b01      	subs	r3, #1
 8003182:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003186:	0e1b      	lsrs	r3, r3, #24
 8003188:	b2da      	uxtb	r2, r3
 800318a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800318e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003190:	3301      	adds	r3, #1
 8003192:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003196:	3b01      	subs	r3, #1
 8003198:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800319a:	f7fd fed7 	bl	8000f4c <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d902      	bls.n	80031b0 <HAL_SD_ReadBlocks+0x384>
 80031aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d112      	bne.n	80031d6 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a18      	ldr	r2, [pc, #96]	; (8003218 <HAL_SD_ReadBlocks+0x3ec>)
 80031b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e01b      	b.n	800320e <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_SD_ReadBlocks+0x3be>
 80031e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1a6      	bne.n	8003138 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f240 523a 	movw	r2, #1338	; 0x53a
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e006      	b.n	800320e <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3748      	adds	r7, #72	; 0x48
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	004005ff 	.word	0x004005ff

0800321c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b092      	sub	sp, #72	; 0x48
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800322a:	f7fd fe8f 	bl	8000f4c <HAL_GetTick>
 800322e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d107      	bne.n	800324e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e182      	b.n	8003554 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	f040 8175 	bne.w	8003546 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	441a      	add	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	429a      	cmp	r2, r3
 800326e:	d907      	bls.n	8003280 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e169      	b.n	8003554 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2203      	movs	r2, #3
 8003284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2200      	movs	r2, #0
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	2b01      	cmp	r3, #1
 8003296:	d002      	beq.n	800329e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329a:	025b      	lsls	r3, r3, #9
 800329c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032a6:	4618      	mov	r0, r3
 80032a8:	f001 f9f2 	bl	8004690 <SDMMC_CmdBlockLength>
 80032ac:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80032ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00f      	beq.n	80032d4 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a9c      	ldr	r2, [pc, #624]	; (800352c <HAL_SD_WriteBlocks+0x310>)
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c2:	431a      	orrs	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e13f      	b.n	8003554 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295
 80032d8:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	025b      	lsls	r3, r3, #9
 80032de:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032e0:	2390      	movs	r3, #144	; 0x90
 80032e2:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80032e4:	2300      	movs	r3, #0
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80032ec:	2301      	movs	r3, #1
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f107 0218 	add.w	r2, r7, #24
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 f99c 	bl	8004638 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d90a      	bls.n	800331c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003312:	4618      	mov	r0, r3
 8003314:	f001 fa44 	bl	80047a0 <SDMMC_CmdWriteMultiBlock>
 8003318:	6478      	str	r0, [r7, #68]	; 0x44
 800331a:	e009      	b.n	8003330 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2210      	movs	r2, #16
 8003320:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003328:	4618      	mov	r0, r3
 800332a:	f001 fa17 	bl	800475c <SDMMC_CmdWriteSingleBlock>
 800332e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003332:	2b00      	cmp	r3, #0
 8003334:	d012      	beq.n	800335c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a7c      	ldr	r2, [pc, #496]	; (800352c <HAL_SD_WriteBlocks+0x310>)
 800333c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003344:	431a      	orrs	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0fb      	b.n	8003554 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003360:	e065      	b.n	800342e <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d040      	beq.n	80033f2 <HAL_SD_WriteBlocks+0x1d6>
 8003370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03d      	beq.n	80033f2 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003376:	2300      	movs	r3, #0
 8003378:	643b      	str	r3, [r7, #64]	; 0x40
 800337a:	e037      	b.n	80033ec <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800337c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003384:	3301      	adds	r3, #1
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338a:	3b01      	subs	r3, #1
 800338c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	021a      	lsls	r2, r3, #8
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800339a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339c:	3301      	adds	r3, #1
 800339e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80033a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a2:	3b01      	subs	r3, #1
 80033a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80033a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	041a      	lsls	r2, r3, #16
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80033b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b4:	3301      	adds	r3, #1
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80033b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ba:	3b01      	subs	r3, #1
 80033bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80033be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	061a      	lsls	r2, r3, #24
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80033ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033cc:	3301      	adds	r3, #1
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80033d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d2:	3b01      	subs	r3, #1
 80033d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f107 0214 	add.w	r2, r7, #20
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 f8b1 	bl	8004548 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80033e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e8:	3301      	adds	r3, #1
 80033ea:	643b      	str	r3, [r7, #64]	; 0x40
 80033ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ee:	2b07      	cmp	r3, #7
 80033f0:	d9c4      	bls.n	800337c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80033f2:	f7fd fdab 	bl	8000f4c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033fe:	429a      	cmp	r2, r3
 8003400:	d902      	bls.n	8003408 <HAL_SD_WriteBlocks+0x1ec>
 8003402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003404:	2b00      	cmp	r3, #0
 8003406:	d112      	bne.n	800342e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a47      	ldr	r2, [pc, #284]	; (800352c <HAL_SD_WriteBlocks+0x310>)
 800340e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003416:	431a      	orrs	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e092      	b.n	8003554 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003438:	2b00      	cmp	r3, #0
 800343a:	d092      	beq.n	8003362 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d022      	beq.n	8003490 <HAL_SD_WriteBlocks+0x274>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d91f      	bls.n	8003490 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	2b03      	cmp	r3, #3
 8003456:	d01b      	beq.n	8003490 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f001 f9c1 	bl	80047e4 <SDMMC_CmdStopTransfer>
 8003462:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003466:	2b00      	cmp	r3, #0
 8003468:	d012      	beq.n	8003490 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2f      	ldr	r2, [pc, #188]	; (800352c <HAL_SD_WriteBlocks+0x310>)
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003478:	431a      	orrs	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e061      	b.n	8003554 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d012      	beq.n	80034c4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a22      	ldr	r2, [pc, #136]	; (800352c <HAL_SD_WriteBlocks+0x310>)
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	f043 0208 	orr.w	r2, r3, #8
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e047      	b.n	8003554 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d012      	beq.n	80034f8 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a15      	ldr	r2, [pc, #84]	; (800352c <HAL_SD_WriteBlocks+0x310>)
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	f043 0202 	orr.w	r2, r3, #2
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e02d      	b.n	8003554 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d014      	beq.n	8003530 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a08      	ldr	r2, [pc, #32]	; (800352c <HAL_SD_WriteBlocks+0x310>)
 800350c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	f043 0210 	orr.w	r2, r3, #16
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e013      	b.n	8003554 <HAL_SD_WriteBlocks+0x338>
 800352c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f240 523a 	movw	r2, #1338	; 0x53a
 8003538:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e006      	b.n	8003554 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
  }
}
 8003554:	4618      	mov	r0, r3
 8003556:	3748      	adds	r7, #72	; 0x48
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800356a:	0f9b      	lsrs	r3, r3, #30
 800356c:	b2da      	uxtb	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003576:	0e9b      	lsrs	r3, r3, #26
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	b2da      	uxtb	r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003588:	0e1b      	lsrs	r3, r3, #24
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	b2da      	uxtb	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359a:	0c1b      	lsrs	r3, r3, #16
 800359c:	b2da      	uxtb	r2, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035bc:	0d1b      	lsrs	r3, r3, #20
 80035be:	b29a      	uxth	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035da:	0bdb      	lsrs	r3, r3, #15
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ec:	0b9b      	lsrs	r3, r3, #14
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035fe:	0b5b      	lsrs	r3, r3, #13
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003610:	0b1b      	lsrs	r3, r3, #12
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	b2da      	uxtb	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2200      	movs	r2, #0
 8003622:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	2b00      	cmp	r3, #0
 800362a:	d163      	bne.n	80036f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003630:	009a      	lsls	r2, r3, #2
 8003632:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003636:	4013      	ands	r3, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800363c:	0f92      	lsrs	r2, r2, #30
 800363e:	431a      	orrs	r2, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003648:	0edb      	lsrs	r3, r3, #27
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	b2da      	uxtb	r2, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365a:	0e1b      	lsrs	r3, r3, #24
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	b2da      	uxtb	r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366c:	0d5b      	lsrs	r3, r3, #21
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	b2da      	uxtb	r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367e:	0c9b      	lsrs	r3, r3, #18
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	b2da      	uxtb	r2, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003690:	0bdb      	lsrs	r3, r3, #15
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	b2da      	uxtb	r2, r3
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	7e1b      	ldrb	r3, [r3, #24]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	3302      	adds	r3, #2
 80036b4:	2201      	movs	r2, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80036be:	fb02 f203 	mul.w	r2, r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	7a1b      	ldrb	r3, [r3, #8]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	2201      	movs	r2, #1
 80036d2:	409a      	lsls	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80036e0:	0a52      	lsrs	r2, r2, #9
 80036e2:	fb02 f203 	mul.w	r2, r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f0:	661a      	str	r2, [r3, #96]	; 0x60
 80036f2:	e031      	b.n	8003758 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d11d      	bne.n	8003738 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	431a      	orrs	r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	3301      	adds	r3, #1
 8003718:	029a      	lsls	r2, r3, #10
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800372c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	661a      	str	r2, [r3, #96]	; 0x60
 8003736:	e00f      	b.n	8003758 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a58      	ldr	r2, [pc, #352]	; (80038a0 <HAL_SD_GetCardCSD+0x344>)
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e09d      	b.n	8003894 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375c:	0b9b      	lsrs	r3, r3, #14
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	b2da      	uxtb	r2, r3
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376e:	09db      	lsrs	r3, r3, #7
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003776:	b2da      	uxtb	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003786:	b2da      	uxtb	r2, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	0fdb      	lsrs	r3, r3, #31
 8003792:	b2da      	uxtb	r2, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	0f5b      	lsrs	r3, r3, #29
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	0e9b      	lsrs	r3, r3, #26
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	0d9b      	lsrs	r3, r3, #22
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	0d5b      	lsrs	r3, r3, #21
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	0c1b      	lsrs	r3, r3, #16
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	0bdb      	lsrs	r3, r3, #15
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	b2da      	uxtb	r2, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	0b9b      	lsrs	r3, r3, #14
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	b2da      	uxtb	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	0b5b      	lsrs	r3, r3, #13
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	b2da      	uxtb	r2, r3
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	0b1b      	lsrs	r3, r3, #12
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	b2da      	uxtb	r2, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	0a9b      	lsrs	r3, r3, #10
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	b2da      	uxtb	r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	0a1b      	lsrs	r3, r3, #8
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	b2da      	uxtb	r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003882:	b2da      	uxtb	r2, r3
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	004005ff 	.word	0x004005ff

080038a4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f970 	bl	8003bf4 <SD_SendStatus>
 8003914:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	0a5b      	lsrs	r3, r3, #9
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003932:	693b      	ldr	r3, [r7, #16]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800393c:	b5b0      	push	{r4, r5, r7, lr}
 800393e:	b094      	sub	sp, #80	; 0x50
 8003940:	af04      	add	r7, sp, #16
 8003942:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003944:	2301      	movs	r3, #1
 8003946:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fe1b 	bl	8004588 <SDIO_GetPowerState>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d102      	bne.n	800395e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003958:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800395c:	e0b7      	b.n	8003ace <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	2b03      	cmp	r3, #3
 8003964:	d02f      	beq.n	80039c6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f001 f801 	bl	8004972 <SDMMC_CmdSendCID>
 8003970:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <SD_InitCard+0x40>
    {
      return errorstate;
 8003978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397a:	e0a8      	b.n	8003ace <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fe45 	bl	8004612 <SDIO_GetResponse>
 8003988:	4602      	mov	r2, r0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2104      	movs	r1, #4
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fe3c 	bl	8004612 <SDIO_GetResponse>
 800399a:	4602      	mov	r2, r0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2108      	movs	r1, #8
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fe33 	bl	8004612 <SDIO_GetResponse>
 80039ac:	4602      	mov	r2, r0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	210c      	movs	r1, #12
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fe2a 	bl	8004612 <SDIO_GetResponse>
 80039be:	4602      	mov	r2, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d00d      	beq.n	80039ea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f107 020e 	add.w	r2, r7, #14
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 f807 	bl	80049ec <SDMMC_CmdSetRelAdd>
 80039de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <SD_InitCard+0xae>
    {
      return errorstate;
 80039e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e8:	e071      	b.n	8003ace <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d036      	beq.n	8003a60 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80039f2:	89fb      	ldrh	r3, [r7, #14]
 80039f4:	461a      	mov	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f000 ffd1 	bl	80049ae <SDMMC_CmdSendCSD>
 8003a0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a16:	e05a      	b.n	8003ace <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fdf7 	bl	8004612 <SDIO_GetResponse>
 8003a24:	4602      	mov	r2, r0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2104      	movs	r1, #4
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fdee 	bl	8004612 <SDIO_GetResponse>
 8003a36:	4602      	mov	r2, r0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2108      	movs	r1, #8
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fde5 	bl	8004612 <SDIO_GetResponse>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	210c      	movs	r1, #12
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fddc 	bl	8004612 <SDIO_GetResponse>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2104      	movs	r1, #4
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fdd3 	bl	8004612 <SDIO_GetResponse>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	0d1a      	lsrs	r2, r3, #20
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a74:	f107 0310 	add.w	r3, r7, #16
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fd6e 	bl	800355c <HAL_SD_GetCardCSD>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a8a:	e020      	b.n	8003ace <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a94:	041b      	lsls	r3, r3, #16
 8003a96:	f04f 0400 	mov.w	r4, #0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	4608      	mov	r0, r1
 8003aa0:	f000 fec2 	bl	8004828 <SDMMC_CmdSelDesel>
 8003aa4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <SD_InitCard+0x174>
  {
    return errorstate;
 8003aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aae:	e00e      	b.n	8003ace <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681d      	ldr	r5, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	466c      	mov	r4, sp
 8003ab8:	f103 0210 	add.w	r2, r3, #16
 8003abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f000 fd06 	bl	80044d8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3740      	adds	r7, #64	; 0x40
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003ad8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 febc 	bl	800486e <SDMMC_CmdGoIdleState>
 8003af6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	e072      	b.n	8003be8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fecf 	bl	80048aa <SDMMC_CmdOperCond>
 8003b0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fea5 	bl	800486e <SDMMC_CmdGoIdleState>
 8003b24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	e05b      	b.n	8003be8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d137      	bne.n	8003bae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fecf 	bl	80048e8 <SDMMC_CmdAppCommand>
 8003b4a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02d      	beq.n	8003bae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b56:	e047      	b.n	8003be8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fec2 	bl	80048e8 <SDMMC_CmdAppCommand>
 8003b64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <SD_PowerON+0x98>
    {
      return errorstate;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	e03b      	b.n	8003be8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	491e      	ldr	r1, [pc, #120]	; (8003bf0 <SD_PowerON+0x118>)
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fed8 	bl	800492c <SDMMC_CmdAppOperCommand>
 8003b7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b88:	e02e      	b.n	8003be8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fd3e 	bl	8004612 <SDIO_GetResponse>
 8003b96:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	0fdb      	lsrs	r3, r3, #31
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <SD_PowerON+0xcc>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <SD_PowerON+0xce>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]

    count++;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3301      	adds	r3, #1
 8003bac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d802      	bhi.n	8003bbe <SD_PowerON+0xe6>
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0cc      	beq.n	8003b58 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d902      	bls.n	8003bce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003bc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bcc:	e00c      	b.n	8003be8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
 8003bde:	e002      	b.n	8003be6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	c1100000 	.word	0xc1100000

08003bf4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003c04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c08:	e018      	b.n	8003c3c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f000 ff09 	bl	8004a2e <SDMMC_CmdSendStatus>
 8003c1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	e009      	b.n	8003c3c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fcef 	bl	8004612 <SDIO_GetResponse>
 8003c34:	4602      	mov	r2, r0
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e056      	b.n	8003d04 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d106      	bne.n	8003c76 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7fc ff4d 	bl	8000b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	ea42 0103 	orr.w	r1, r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	f003 0104 	and.w	r1, r3, #4
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e03f      	b.n	8003d9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd f832 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2224      	movs	r2, #36	; 0x24
 8003d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f829 	bl	8003da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003dea:	f023 030c 	bic.w	r3, r3, #12
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	430b      	orrs	r3, r1
 8003df6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e16:	f040 8199 	bne.w	800414c <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4ac6      	ldr	r2, [pc, #792]	; (8004138 <UART_SetConfig+0x390>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00f      	beq.n	8003e44 <UART_SetConfig+0x9c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4ac4      	ldr	r2, [pc, #784]	; (800413c <UART_SetConfig+0x394>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00a      	beq.n	8003e44 <UART_SetConfig+0x9c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4ac3      	ldr	r2, [pc, #780]	; (8004140 <UART_SetConfig+0x398>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d005      	beq.n	8003e44 <UART_SetConfig+0x9c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4ac1      	ldr	r2, [pc, #772]	; (8004144 <UART_SetConfig+0x39c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	f040 80bd 	bne.w	8003fbe <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e44:	f7fe fa80 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 8003e48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	461d      	mov	r5, r3
 8003e4e:	f04f 0600 	mov.w	r6, #0
 8003e52:	46a8      	mov	r8, r5
 8003e54:	46b1      	mov	r9, r6
 8003e56:	eb18 0308 	adds.w	r3, r8, r8
 8003e5a:	eb49 0409 	adc.w	r4, r9, r9
 8003e5e:	4698      	mov	r8, r3
 8003e60:	46a1      	mov	r9, r4
 8003e62:	eb18 0805 	adds.w	r8, r8, r5
 8003e66:	eb49 0906 	adc.w	r9, r9, r6
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e7e:	4688      	mov	r8, r1
 8003e80:	4691      	mov	r9, r2
 8003e82:	eb18 0005 	adds.w	r0, r8, r5
 8003e86:	eb49 0106 	adc.w	r1, r9, r6
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	461d      	mov	r5, r3
 8003e90:	f04f 0600 	mov.w	r6, #0
 8003e94:	196b      	adds	r3, r5, r5
 8003e96:	eb46 0406 	adc.w	r4, r6, r6
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	f7fc f9bb 	bl	8000218 <__aeabi_uldivmod>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4ba7      	ldr	r3, [pc, #668]	; (8004148 <UART_SetConfig+0x3a0>)
 8003eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	461d      	mov	r5, r3
 8003eb8:	f04f 0600 	mov.w	r6, #0
 8003ebc:	46a9      	mov	r9, r5
 8003ebe:	46b2      	mov	sl, r6
 8003ec0:	eb19 0309 	adds.w	r3, r9, r9
 8003ec4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ec8:	4699      	mov	r9, r3
 8003eca:	46a2      	mov	sl, r4
 8003ecc:	eb19 0905 	adds.w	r9, r9, r5
 8003ed0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ed4:	f04f 0100 	mov.w	r1, #0
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ee0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ee4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ee8:	4689      	mov	r9, r1
 8003eea:	4692      	mov	sl, r2
 8003eec:	eb19 0005 	adds.w	r0, r9, r5
 8003ef0:	eb4a 0106 	adc.w	r1, sl, r6
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	461d      	mov	r5, r3
 8003efa:	f04f 0600 	mov.w	r6, #0
 8003efe:	196b      	adds	r3, r5, r5
 8003f00:	eb46 0406 	adc.w	r4, r6, r6
 8003f04:	461a      	mov	r2, r3
 8003f06:	4623      	mov	r3, r4
 8003f08:	f7fc f986 	bl	8000218 <__aeabi_uldivmod>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b8d      	ldr	r3, [pc, #564]	; (8004148 <UART_SetConfig+0x3a0>)
 8003f14:	fba3 1302 	umull	r1, r3, r3, r2
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	2164      	movs	r1, #100	; 0x64
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	3332      	adds	r3, #50	; 0x32
 8003f26:	4a88      	ldr	r2, [pc, #544]	; (8004148 <UART_SetConfig+0x3a0>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f34:	4498      	add	r8, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	461d      	mov	r5, r3
 8003f3a:	f04f 0600 	mov.w	r6, #0
 8003f3e:	46a9      	mov	r9, r5
 8003f40:	46b2      	mov	sl, r6
 8003f42:	eb19 0309 	adds.w	r3, r9, r9
 8003f46:	eb4a 040a 	adc.w	r4, sl, sl
 8003f4a:	4699      	mov	r9, r3
 8003f4c:	46a2      	mov	sl, r4
 8003f4e:	eb19 0905 	adds.w	r9, r9, r5
 8003f52:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f56:	f04f 0100 	mov.w	r1, #0
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f6a:	4689      	mov	r9, r1
 8003f6c:	4692      	mov	sl, r2
 8003f6e:	eb19 0005 	adds.w	r0, r9, r5
 8003f72:	eb4a 0106 	adc.w	r1, sl, r6
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	461d      	mov	r5, r3
 8003f7c:	f04f 0600 	mov.w	r6, #0
 8003f80:	196b      	adds	r3, r5, r5
 8003f82:	eb46 0406 	adc.w	r4, r6, r6
 8003f86:	461a      	mov	r2, r3
 8003f88:	4623      	mov	r3, r4
 8003f8a:	f7fc f945 	bl	8000218 <__aeabi_uldivmod>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	460c      	mov	r4, r1
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b6c      	ldr	r3, [pc, #432]	; (8004148 <UART_SetConfig+0x3a0>)
 8003f96:	fba3 1302 	umull	r1, r3, r3, r2
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2164      	movs	r1, #100	; 0x64
 8003f9e:	fb01 f303 	mul.w	r3, r1, r3
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	3332      	adds	r3, #50	; 0x32
 8003fa8:	4a67      	ldr	r2, [pc, #412]	; (8004148 <UART_SetConfig+0x3a0>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	f003 0207 	and.w	r2, r3, #7
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4442      	add	r2, r8
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	e27d      	b.n	80044ba <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fbe:	f7fe f9af 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8003fc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	461d      	mov	r5, r3
 8003fc8:	f04f 0600 	mov.w	r6, #0
 8003fcc:	46a8      	mov	r8, r5
 8003fce:	46b1      	mov	r9, r6
 8003fd0:	eb18 0308 	adds.w	r3, r8, r8
 8003fd4:	eb49 0409 	adc.w	r4, r9, r9
 8003fd8:	4698      	mov	r8, r3
 8003fda:	46a1      	mov	r9, r4
 8003fdc:	eb18 0805 	adds.w	r8, r8, r5
 8003fe0:	eb49 0906 	adc.w	r9, r9, r6
 8003fe4:	f04f 0100 	mov.w	r1, #0
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ff0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ff4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ff8:	4688      	mov	r8, r1
 8003ffa:	4691      	mov	r9, r2
 8003ffc:	eb18 0005 	adds.w	r0, r8, r5
 8004000:	eb49 0106 	adc.w	r1, r9, r6
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	461d      	mov	r5, r3
 800400a:	f04f 0600 	mov.w	r6, #0
 800400e:	196b      	adds	r3, r5, r5
 8004010:	eb46 0406 	adc.w	r4, r6, r6
 8004014:	461a      	mov	r2, r3
 8004016:	4623      	mov	r3, r4
 8004018:	f7fc f8fe 	bl	8000218 <__aeabi_uldivmod>
 800401c:	4603      	mov	r3, r0
 800401e:	460c      	mov	r4, r1
 8004020:	461a      	mov	r2, r3
 8004022:	4b49      	ldr	r3, [pc, #292]	; (8004148 <UART_SetConfig+0x3a0>)
 8004024:	fba3 2302 	umull	r2, r3, r3, r2
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	461d      	mov	r5, r3
 8004032:	f04f 0600 	mov.w	r6, #0
 8004036:	46a9      	mov	r9, r5
 8004038:	46b2      	mov	sl, r6
 800403a:	eb19 0309 	adds.w	r3, r9, r9
 800403e:	eb4a 040a 	adc.w	r4, sl, sl
 8004042:	4699      	mov	r9, r3
 8004044:	46a2      	mov	sl, r4
 8004046:	eb19 0905 	adds.w	r9, r9, r5
 800404a:	eb4a 0a06 	adc.w	sl, sl, r6
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800405a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800405e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004062:	4689      	mov	r9, r1
 8004064:	4692      	mov	sl, r2
 8004066:	eb19 0005 	adds.w	r0, r9, r5
 800406a:	eb4a 0106 	adc.w	r1, sl, r6
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	461d      	mov	r5, r3
 8004074:	f04f 0600 	mov.w	r6, #0
 8004078:	196b      	adds	r3, r5, r5
 800407a:	eb46 0406 	adc.w	r4, r6, r6
 800407e:	461a      	mov	r2, r3
 8004080:	4623      	mov	r3, r4
 8004082:	f7fc f8c9 	bl	8000218 <__aeabi_uldivmod>
 8004086:	4603      	mov	r3, r0
 8004088:	460c      	mov	r4, r1
 800408a:	461a      	mov	r2, r3
 800408c:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <UART_SetConfig+0x3a0>)
 800408e:	fba3 1302 	umull	r1, r3, r3, r2
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	2164      	movs	r1, #100	; 0x64
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	3332      	adds	r3, #50	; 0x32
 80040a0:	4a29      	ldr	r2, [pc, #164]	; (8004148 <UART_SetConfig+0x3a0>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040ae:	4498      	add	r8, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	461d      	mov	r5, r3
 80040b4:	f04f 0600 	mov.w	r6, #0
 80040b8:	46a9      	mov	r9, r5
 80040ba:	46b2      	mov	sl, r6
 80040bc:	eb19 0309 	adds.w	r3, r9, r9
 80040c0:	eb4a 040a 	adc.w	r4, sl, sl
 80040c4:	4699      	mov	r9, r3
 80040c6:	46a2      	mov	sl, r4
 80040c8:	eb19 0905 	adds.w	r9, r9, r5
 80040cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80040d0:	f04f 0100 	mov.w	r1, #0
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040e4:	4689      	mov	r9, r1
 80040e6:	4692      	mov	sl, r2
 80040e8:	eb19 0005 	adds.w	r0, r9, r5
 80040ec:	eb4a 0106 	adc.w	r1, sl, r6
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	461d      	mov	r5, r3
 80040f6:	f04f 0600 	mov.w	r6, #0
 80040fa:	196b      	adds	r3, r5, r5
 80040fc:	eb46 0406 	adc.w	r4, r6, r6
 8004100:	461a      	mov	r2, r3
 8004102:	4623      	mov	r3, r4
 8004104:	f7fc f888 	bl	8000218 <__aeabi_uldivmod>
 8004108:	4603      	mov	r3, r0
 800410a:	460c      	mov	r4, r1
 800410c:	461a      	mov	r2, r3
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <UART_SetConfig+0x3a0>)
 8004110:	fba3 1302 	umull	r1, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	2164      	movs	r1, #100	; 0x64
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	3332      	adds	r3, #50	; 0x32
 8004122:	4a09      	ldr	r2, [pc, #36]	; (8004148 <UART_SetConfig+0x3a0>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	f003 0207 	and.w	r2, r3, #7
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4442      	add	r2, r8
 8004134:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004136:	e1c0      	b.n	80044ba <UART_SetConfig+0x712>
 8004138:	40011000 	.word	0x40011000
 800413c:	40011400 	.word	0x40011400
 8004140:	40011800 	.word	0x40011800
 8004144:	40011c00 	.word	0x40011c00
 8004148:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4adc      	ldr	r2, [pc, #880]	; (80044c4 <UART_SetConfig+0x71c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00f      	beq.n	8004176 <UART_SetConfig+0x3ce>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4adb      	ldr	r2, [pc, #876]	; (80044c8 <UART_SetConfig+0x720>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00a      	beq.n	8004176 <UART_SetConfig+0x3ce>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4ad9      	ldr	r2, [pc, #868]	; (80044cc <UART_SetConfig+0x724>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d005      	beq.n	8004176 <UART_SetConfig+0x3ce>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4ad8      	ldr	r2, [pc, #864]	; (80044d0 <UART_SetConfig+0x728>)
 8004170:	4293      	cmp	r3, r2
 8004172:	f040 80d1 	bne.w	8004318 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004176:	f7fe f8e7 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 800417a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	469a      	mov	sl, r3
 8004180:	f04f 0b00 	mov.w	fp, #0
 8004184:	46d0      	mov	r8, sl
 8004186:	46d9      	mov	r9, fp
 8004188:	eb18 0308 	adds.w	r3, r8, r8
 800418c:	eb49 0409 	adc.w	r4, r9, r9
 8004190:	4698      	mov	r8, r3
 8004192:	46a1      	mov	r9, r4
 8004194:	eb18 080a 	adds.w	r8, r8, sl
 8004198:	eb49 090b 	adc.w	r9, r9, fp
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041b0:	4688      	mov	r8, r1
 80041b2:	4691      	mov	r9, r2
 80041b4:	eb1a 0508 	adds.w	r5, sl, r8
 80041b8:	eb4b 0609 	adc.w	r6, fp, r9
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4619      	mov	r1, r3
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	f04f 0400 	mov.w	r4, #0
 80041ce:	0094      	lsls	r4, r2, #2
 80041d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041d4:	008b      	lsls	r3, r1, #2
 80041d6:	461a      	mov	r2, r3
 80041d8:	4623      	mov	r3, r4
 80041da:	4628      	mov	r0, r5
 80041dc:	4631      	mov	r1, r6
 80041de:	f7fc f81b 	bl	8000218 <__aeabi_uldivmod>
 80041e2:	4603      	mov	r3, r0
 80041e4:	460c      	mov	r4, r1
 80041e6:	461a      	mov	r2, r3
 80041e8:	4bba      	ldr	r3, [pc, #744]	; (80044d4 <UART_SetConfig+0x72c>)
 80041ea:	fba3 2302 	umull	r2, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	469b      	mov	fp, r3
 80041f8:	f04f 0c00 	mov.w	ip, #0
 80041fc:	46d9      	mov	r9, fp
 80041fe:	46e2      	mov	sl, ip
 8004200:	eb19 0309 	adds.w	r3, r9, r9
 8004204:	eb4a 040a 	adc.w	r4, sl, sl
 8004208:	4699      	mov	r9, r3
 800420a:	46a2      	mov	sl, r4
 800420c:	eb19 090b 	adds.w	r9, r9, fp
 8004210:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004214:	f04f 0100 	mov.w	r1, #0
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004220:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004224:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004228:	4689      	mov	r9, r1
 800422a:	4692      	mov	sl, r2
 800422c:	eb1b 0509 	adds.w	r5, fp, r9
 8004230:	eb4c 060a 	adc.w	r6, ip, sl
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4619      	mov	r1, r3
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	f04f 0400 	mov.w	r4, #0
 8004246:	0094      	lsls	r4, r2, #2
 8004248:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800424c:	008b      	lsls	r3, r1, #2
 800424e:	461a      	mov	r2, r3
 8004250:	4623      	mov	r3, r4
 8004252:	4628      	mov	r0, r5
 8004254:	4631      	mov	r1, r6
 8004256:	f7fb ffdf 	bl	8000218 <__aeabi_uldivmod>
 800425a:	4603      	mov	r3, r0
 800425c:	460c      	mov	r4, r1
 800425e:	461a      	mov	r2, r3
 8004260:	4b9c      	ldr	r3, [pc, #624]	; (80044d4 <UART_SetConfig+0x72c>)
 8004262:	fba3 1302 	umull	r1, r3, r3, r2
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	2164      	movs	r1, #100	; 0x64
 800426a:	fb01 f303 	mul.w	r3, r1, r3
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	3332      	adds	r3, #50	; 0x32
 8004274:	4a97      	ldr	r2, [pc, #604]	; (80044d4 <UART_SetConfig+0x72c>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004280:	4498      	add	r8, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	469b      	mov	fp, r3
 8004286:	f04f 0c00 	mov.w	ip, #0
 800428a:	46d9      	mov	r9, fp
 800428c:	46e2      	mov	sl, ip
 800428e:	eb19 0309 	adds.w	r3, r9, r9
 8004292:	eb4a 040a 	adc.w	r4, sl, sl
 8004296:	4699      	mov	r9, r3
 8004298:	46a2      	mov	sl, r4
 800429a:	eb19 090b 	adds.w	r9, r9, fp
 800429e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042a2:	f04f 0100 	mov.w	r1, #0
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042b6:	4689      	mov	r9, r1
 80042b8:	4692      	mov	sl, r2
 80042ba:	eb1b 0509 	adds.w	r5, fp, r9
 80042be:	eb4c 060a 	adc.w	r6, ip, sl
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	4619      	mov	r1, r3
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	f04f 0400 	mov.w	r4, #0
 80042d4:	0094      	lsls	r4, r2, #2
 80042d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042da:	008b      	lsls	r3, r1, #2
 80042dc:	461a      	mov	r2, r3
 80042de:	4623      	mov	r3, r4
 80042e0:	4628      	mov	r0, r5
 80042e2:	4631      	mov	r1, r6
 80042e4:	f7fb ff98 	bl	8000218 <__aeabi_uldivmod>
 80042e8:	4603      	mov	r3, r0
 80042ea:	460c      	mov	r4, r1
 80042ec:	461a      	mov	r2, r3
 80042ee:	4b79      	ldr	r3, [pc, #484]	; (80044d4 <UART_SetConfig+0x72c>)
 80042f0:	fba3 1302 	umull	r1, r3, r3, r2
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	2164      	movs	r1, #100	; 0x64
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	3332      	adds	r3, #50	; 0x32
 8004302:	4a74      	ldr	r2, [pc, #464]	; (80044d4 <UART_SetConfig+0x72c>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	f003 020f 	and.w	r2, r3, #15
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4442      	add	r2, r8
 8004314:	609a      	str	r2, [r3, #8]
 8004316:	e0d0      	b.n	80044ba <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004318:	f7fe f802 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 800431c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	469a      	mov	sl, r3
 8004322:	f04f 0b00 	mov.w	fp, #0
 8004326:	46d0      	mov	r8, sl
 8004328:	46d9      	mov	r9, fp
 800432a:	eb18 0308 	adds.w	r3, r8, r8
 800432e:	eb49 0409 	adc.w	r4, r9, r9
 8004332:	4698      	mov	r8, r3
 8004334:	46a1      	mov	r9, r4
 8004336:	eb18 080a 	adds.w	r8, r8, sl
 800433a:	eb49 090b 	adc.w	r9, r9, fp
 800433e:	f04f 0100 	mov.w	r1, #0
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800434a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800434e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004352:	4688      	mov	r8, r1
 8004354:	4691      	mov	r9, r2
 8004356:	eb1a 0508 	adds.w	r5, sl, r8
 800435a:	eb4b 0609 	adc.w	r6, fp, r9
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	4619      	mov	r1, r3
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	f04f 0400 	mov.w	r4, #0
 8004370:	0094      	lsls	r4, r2, #2
 8004372:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004376:	008b      	lsls	r3, r1, #2
 8004378:	461a      	mov	r2, r3
 800437a:	4623      	mov	r3, r4
 800437c:	4628      	mov	r0, r5
 800437e:	4631      	mov	r1, r6
 8004380:	f7fb ff4a 	bl	8000218 <__aeabi_uldivmod>
 8004384:	4603      	mov	r3, r0
 8004386:	460c      	mov	r4, r1
 8004388:	461a      	mov	r2, r3
 800438a:	4b52      	ldr	r3, [pc, #328]	; (80044d4 <UART_SetConfig+0x72c>)
 800438c:	fba3 2302 	umull	r2, r3, r3, r2
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	469b      	mov	fp, r3
 800439a:	f04f 0c00 	mov.w	ip, #0
 800439e:	46d9      	mov	r9, fp
 80043a0:	46e2      	mov	sl, ip
 80043a2:	eb19 0309 	adds.w	r3, r9, r9
 80043a6:	eb4a 040a 	adc.w	r4, sl, sl
 80043aa:	4699      	mov	r9, r3
 80043ac:	46a2      	mov	sl, r4
 80043ae:	eb19 090b 	adds.w	r9, r9, fp
 80043b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043ca:	4689      	mov	r9, r1
 80043cc:	4692      	mov	sl, r2
 80043ce:	eb1b 0509 	adds.w	r5, fp, r9
 80043d2:	eb4c 060a 	adc.w	r6, ip, sl
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4619      	mov	r1, r3
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	f04f 0400 	mov.w	r4, #0
 80043e8:	0094      	lsls	r4, r2, #2
 80043ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043ee:	008b      	lsls	r3, r1, #2
 80043f0:	461a      	mov	r2, r3
 80043f2:	4623      	mov	r3, r4
 80043f4:	4628      	mov	r0, r5
 80043f6:	4631      	mov	r1, r6
 80043f8:	f7fb ff0e 	bl	8000218 <__aeabi_uldivmod>
 80043fc:	4603      	mov	r3, r0
 80043fe:	460c      	mov	r4, r1
 8004400:	461a      	mov	r2, r3
 8004402:	4b34      	ldr	r3, [pc, #208]	; (80044d4 <UART_SetConfig+0x72c>)
 8004404:	fba3 1302 	umull	r1, r3, r3, r2
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	2164      	movs	r1, #100	; 0x64
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	3332      	adds	r3, #50	; 0x32
 8004416:	4a2f      	ldr	r2, [pc, #188]	; (80044d4 <UART_SetConfig+0x72c>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004422:	4498      	add	r8, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	469b      	mov	fp, r3
 8004428:	f04f 0c00 	mov.w	ip, #0
 800442c:	46d9      	mov	r9, fp
 800442e:	46e2      	mov	sl, ip
 8004430:	eb19 0309 	adds.w	r3, r9, r9
 8004434:	eb4a 040a 	adc.w	r4, sl, sl
 8004438:	4699      	mov	r9, r3
 800443a:	46a2      	mov	sl, r4
 800443c:	eb19 090b 	adds.w	r9, r9, fp
 8004440:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004444:	f04f 0100 	mov.w	r1, #0
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004458:	4689      	mov	r9, r1
 800445a:	4692      	mov	sl, r2
 800445c:	eb1b 0509 	adds.w	r5, fp, r9
 8004460:	eb4c 060a 	adc.w	r6, ip, sl
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4619      	mov	r1, r3
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	f04f 0400 	mov.w	r4, #0
 8004476:	0094      	lsls	r4, r2, #2
 8004478:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800447c:	008b      	lsls	r3, r1, #2
 800447e:	461a      	mov	r2, r3
 8004480:	4623      	mov	r3, r4
 8004482:	4628      	mov	r0, r5
 8004484:	4631      	mov	r1, r6
 8004486:	f7fb fec7 	bl	8000218 <__aeabi_uldivmod>
 800448a:	4603      	mov	r3, r0
 800448c:	460c      	mov	r4, r1
 800448e:	461a      	mov	r2, r3
 8004490:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <UART_SetConfig+0x72c>)
 8004492:	fba3 1302 	umull	r1, r3, r3, r2
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2164      	movs	r1, #100	; 0x64
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	3332      	adds	r3, #50	; 0x32
 80044a4:	4a0b      	ldr	r2, [pc, #44]	; (80044d4 <UART_SetConfig+0x72c>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	f003 020f 	and.w	r2, r3, #15
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4442      	add	r2, r8
 80044b6:	609a      	str	r2, [r3, #8]
}
 80044b8:	e7ff      	b.n	80044ba <UART_SetConfig+0x712>
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c4:	40011000 	.word	0x40011000
 80044c8:	40011400 	.word	0x40011400
 80044cc:	40011800 	.word	0x40011800
 80044d0:	40011c00 	.word	0x40011c00
 80044d4:	51eb851f 	.word	0x51eb851f

080044d8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80044d8:	b084      	sub	sp, #16
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	f107 001c 	add.w	r0, r7, #28
 80044e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80044ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80044f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80044f2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80044f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80044fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80044fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004502:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004512:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	b004      	add	sp, #16
 800452c:	4770      	bx	lr

0800452e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2203      	movs	r2, #3
 8004576:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004578:	2002      	movs	r0, #2
 800457a:	f7fc fcf3 	bl	8000f64 <HAL_Delay>
  
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0303 	and.w	r3, r3, #3
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80045c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80045c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80045ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80045de:	f023 030f 	bic.w	r3, r3, #15
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	b2db      	uxtb	r3, r3
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3314      	adds	r3, #20
 8004620:	461a      	mov	r2, r3
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	4413      	add	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
}  
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800465e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004664:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800466a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004682:	2300      	movs	r3, #0

}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800469e:	2310      	movs	r3, #16
 80046a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046a2:	2340      	movs	r3, #64	; 0x40
 80046a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046b0:	f107 0308 	add.w	r3, r7, #8
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff ff74 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80046bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c0:	2110      	movs	r1, #16
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f9fe 	bl	8004ac4 <SDMMC_GetCmdResp1>
 80046c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046ca:	69fb      	ldr	r3, [r7, #28]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3720      	adds	r7, #32
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80046e2:	2311      	movs	r3, #17
 80046e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046e6:	2340      	movs	r3, #64	; 0x40
 80046e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046f4:	f107 0308 	add.w	r3, r7, #8
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff ff52 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004700:	f241 3288 	movw	r2, #5000	; 0x1388
 8004704:	2111      	movs	r1, #17
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f9dc 	bl	8004ac4 <SDMMC_GetCmdResp1>
 800470c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800470e:	69fb      	ldr	r3, [r7, #28]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004726:	2312      	movs	r3, #18
 8004728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800472a:	2340      	movs	r3, #64	; 0x40
 800472c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004736:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004738:	f107 0308 	add.w	r3, r7, #8
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff ff30 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	2112      	movs	r1, #18
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f9ba 	bl	8004ac4 <SDMMC_GetCmdResp1>
 8004750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004752:	69fb      	ldr	r3, [r7, #28]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800476a:	2318      	movs	r3, #24
 800476c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800476e:	2340      	movs	r3, #64	; 0x40
 8004770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800477a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800477c:	f107 0308 	add.w	r3, r7, #8
 8004780:	4619      	mov	r1, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff ff0e 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004788:	f241 3288 	movw	r2, #5000	; 0x1388
 800478c:	2118      	movs	r1, #24
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f998 	bl	8004ac4 <SDMMC_GetCmdResp1>
 8004794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004796:	69fb      	ldr	r3, [r7, #28]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3720      	adds	r7, #32
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80047ae:	2319      	movs	r3, #25
 80047b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047b2:	2340      	movs	r3, #64	; 0x40
 80047b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047c0:	f107 0308 	add.w	r3, r7, #8
 80047c4:	4619      	mov	r1, r3
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff feec 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d0:	2119      	movs	r1, #25
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f976 	bl	8004ac4 <SDMMC_GetCmdResp1>
 80047d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047da:	69fb      	ldr	r3, [r7, #28]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3720      	adds	r7, #32
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80047f0:	230c      	movs	r3, #12
 80047f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047f4:	2340      	movs	r3, #64	; 0x40
 80047f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004800:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	4619      	mov	r1, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff fecb 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800480e:	4a05      	ldr	r2, [pc, #20]	; (8004824 <SDMMC_CmdStopTransfer+0x40>)
 8004810:	210c      	movs	r1, #12
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f956 	bl	8004ac4 <SDMMC_GetCmdResp1>
 8004818:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800481a:	69fb      	ldr	r3, [r7, #28]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	05f5e100 	.word	0x05f5e100

08004828 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004838:	2307      	movs	r3, #7
 800483a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800483c:	2340      	movs	r3, #64	; 0x40
 800483e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004840:	2300      	movs	r3, #0
 8004842:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004848:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800484a:	f107 0310 	add.w	r3, r7, #16
 800484e:	4619      	mov	r1, r3
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff fea7 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004856:	f241 3288 	movw	r2, #5000	; 0x1388
 800485a:	2107      	movs	r1, #7
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f931 	bl	8004ac4 <SDMMC_GetCmdResp1>
 8004862:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004866:	4618      	mov	r0, r3
 8004868:	3728      	adds	r7, #40	; 0x28
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b088      	sub	sp, #32
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800488a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800488c:	f107 0308 	add.w	r3, r7, #8
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff fe86 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f8eb 	bl	8004a74 <SDMMC_GetCmdError>
 800489e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048a0:	69fb      	ldr	r3, [r7, #28]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b088      	sub	sp, #32
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80048b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80048b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80048b8:	2308      	movs	r3, #8
 80048ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048bc:	2340      	movs	r3, #64	; 0x40
 80048be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048ca:	f107 0308 	add.w	r3, r7, #8
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff fe67 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fad4 	bl	8004e84 <SDMMC_GetCmdResp7>
 80048dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048de:	69fb      	ldr	r3, [r7, #28]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80048f6:	2337      	movs	r3, #55	; 0x37
 80048f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048fa:	2340      	movs	r3, #64	; 0x40
 80048fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004906:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004908:	f107 0308 	add.w	r3, r7, #8
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff fe48 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004914:	f241 3288 	movw	r2, #5000	; 0x1388
 8004918:	2137      	movs	r1, #55	; 0x37
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f8d2 	bl	8004ac4 <SDMMC_GetCmdResp1>
 8004920:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004922:	69fb      	ldr	r3, [r7, #28]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800493c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004942:	2329      	movs	r3, #41	; 0x29
 8004944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004946:	2340      	movs	r3, #64	; 0x40
 8004948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800494e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004952:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004954:	f107 0308 	add.w	r3, r7, #8
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fe22 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f9e1 	bl	8004d28 <SDMMC_GetCmdResp3>
 8004966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004968:	69fb      	ldr	r3, [r7, #28]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b088      	sub	sp, #32
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800497e:	2302      	movs	r3, #2
 8004980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004982:	23c0      	movs	r3, #192	; 0xc0
 8004984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800498a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800498e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004990:	f107 0308 	add.w	r3, r7, #8
 8004994:	4619      	mov	r1, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fe04 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f97d 	bl	8004c9c <SDMMC_GetCmdResp2>
 80049a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049a4:	69fb      	ldr	r3, [r7, #28]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b088      	sub	sp, #32
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80049bc:	2309      	movs	r3, #9
 80049be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80049c0:	23c0      	movs	r3, #192	; 0xc0
 80049c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049ce:	f107 0308 	add.w	r3, r7, #8
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff fde5 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f95e 	bl	8004c9c <SDMMC_GetCmdResp2>
 80049e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049e2:	69fb      	ldr	r3, [r7, #28]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80049fa:	2303      	movs	r3, #3
 80049fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049fe:	2340      	movs	r3, #64	; 0x40
 8004a00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a0c:	f107 0308 	add.w	r3, r7, #8
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fdc6 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	2103      	movs	r1, #3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f9bd 	bl	8004d9c <SDMMC_GetCmdResp6>
 8004a22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a24:	69fb      	ldr	r3, [r7, #28]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b088      	sub	sp, #32
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004a3c:	230d      	movs	r3, #13
 8004a3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a40:	2340      	movs	r3, #64	; 0x40
 8004a42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a4e:	f107 0308 	add.w	r3, r7, #8
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff fda5 	bl	80045a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5e:	210d      	movs	r1, #13
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f82f 	bl	8004ac4 <SDMMC_GetCmdResp1>
 8004a66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a68:	69fb      	ldr	r3, [r7, #28]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004a74:	b490      	push	{r4, r7}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <SDMMC_GetCmdError+0x48>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <SDMMC_GetCmdError+0x4c>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	0a5b      	lsrs	r3, r3, #9
 8004a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004a90:	4623      	mov	r3, r4
 8004a92:	1e5c      	subs	r4, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a9c:	e009      	b.n	8004ab2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f2      	beq.n	8004a90 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	22c5      	movs	r2, #197	; 0xc5
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc90      	pop	{r4, r7}
 8004aba:	4770      	bx	lr
 8004abc:	20000000 	.word	0x20000000
 8004ac0:	10624dd3 	.word	0x10624dd3

08004ac4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	460b      	mov	r3, r1
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004ad2:	4b6f      	ldr	r3, [pc, #444]	; (8004c90 <SDMMC_GetCmdResp1+0x1cc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a6f      	ldr	r2, [pc, #444]	; (8004c94 <SDMMC_GetCmdResp1+0x1d0>)
 8004ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8004adc:	0a5b      	lsrs	r3, r3, #9
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004ae4:	4623      	mov	r3, r4
 8004ae6:	1e5c      	subs	r4, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004aec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004af0:	e0c9      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <SDMMC_GetCmdResp1+0x20>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1eb      	bne.n	8004ae4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b1e:	2304      	movs	r3, #4
 8004b20:	e0b1      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d004      	beq.n	8004b38 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0a6      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	22c5      	movs	r2, #197	; 0xc5
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f7ff fd5a 	bl	80045f8 <SDIO_GetCommandResponse>
 8004b44:	4603      	mov	r3, r0
 8004b46:	461a      	mov	r2, r3
 8004b48:	7afb      	ldrb	r3, [r7, #11]
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d001      	beq.n	8004b52 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e099      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004b52:	2100      	movs	r1, #0
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7ff fd5c 	bl	8004612 <SDIO_GetResponse>
 8004b5a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4b4e      	ldr	r3, [pc, #312]	; (8004c98 <SDMMC_GetCmdResp1+0x1d4>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	e08d      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	da02      	bge.n	8004b76 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004b70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b74:	e087      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004b80:	2340      	movs	r3, #64	; 0x40
 8004b82:	e080      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	e079      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ba0:	e071      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bb0:	e069      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bc0:	e061      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bd0:	e059      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004be0:	e051      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bf0:	e049      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004bfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c00:	e041      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004c0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c10:	e039      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c20:	e031      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004c2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c30:	e029      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004c3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c40:	e021      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004c4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c50:	e019      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004c5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c60:	e011      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004c6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c70:	e009      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004c7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004c80:	e001      	b.n	8004c86 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd90      	pop	{r4, r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000000 	.word	0x20000000
 8004c94:	10624dd3 	.word	0x10624dd3
 8004c98:	fdffe008 	.word	0xfdffe008

08004c9c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004c9c:	b490      	push	{r4, r7}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ca4:	4b1e      	ldr	r3, [pc, #120]	; (8004d20 <SDMMC_GetCmdResp2+0x84>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1e      	ldr	r2, [pc, #120]	; (8004d24 <SDMMC_GetCmdResp2+0x88>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	0a5b      	lsrs	r3, r3, #9
 8004cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004cb8:	4623      	mov	r3, r4
 8004cba:	1e5c      	subs	r4, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004cc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cc4:	e026      	b.n	8004d14 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <SDMMC_GetCmdResp2+0x1c>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1eb      	bne.n	8004cb8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2204      	movs	r2, #4
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004cf2:	2304      	movs	r3, #4
 8004cf4:	e00e      	b.n	8004d14 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d004      	beq.n	8004d0c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e003      	b.n	8004d14 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	22c5      	movs	r2, #197	; 0xc5
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc90      	pop	{r4, r7}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000000 	.word	0x20000000
 8004d24:	10624dd3 	.word	0x10624dd3

08004d28 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004d28:	b490      	push	{r4, r7}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d30:	4b18      	ldr	r3, [pc, #96]	; (8004d94 <SDMMC_GetCmdResp3+0x6c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a18      	ldr	r2, [pc, #96]	; (8004d98 <SDMMC_GetCmdResp3+0x70>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	0a5b      	lsrs	r3, r3, #9
 8004d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d40:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004d44:	4623      	mov	r3, r4
 8004d46:	1e5c      	subs	r4, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d102      	bne.n	8004d52 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d50:	e01b      	b.n	8004d8a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d56:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <SDMMC_GetCmdResp3+0x1c>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1eb      	bne.n	8004d44 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d004      	beq.n	8004d82 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d7e:	2304      	movs	r3, #4
 8004d80:	e003      	b.n	8004d8a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	22c5      	movs	r2, #197	; 0xc5
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc90      	pop	{r4, r7}
 8004d92:	4770      	bx	lr
 8004d94:	20000000 	.word	0x20000000
 8004d98:	10624dd3 	.word	0x10624dd3

08004d9c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004d9c:	b590      	push	{r4, r7, lr}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	460b      	mov	r3, r1
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004daa:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <SDMMC_GetCmdResp6+0xe0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a34      	ldr	r2, [pc, #208]	; (8004e80 <SDMMC_GetCmdResp6+0xe4>)
 8004db0:	fba2 2303 	umull	r2, r3, r2, r3
 8004db4:	0a5b      	lsrs	r3, r3, #9
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	1e5c      	subs	r4, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004dc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dca:	e052      	b.n	8004e72 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <SDMMC_GetCmdResp6+0x22>
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1eb      	bne.n	8004dbe <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d004      	beq.n	8004dfc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2204      	movs	r2, #4
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004df8:	2304      	movs	r3, #4
 8004dfa:	e03a      	b.n	8004e72 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d004      	beq.n	8004e12 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e02f      	b.n	8004e72 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7ff fbf0 	bl	80045f8 <SDIO_GetCommandResponse>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	7afb      	ldrb	r3, [r7, #11]
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d001      	beq.n	8004e26 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e025      	b.n	8004e72 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	22c5      	movs	r2, #197	; 0xc5
 8004e2a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7ff fbef 	bl	8004612 <SDIO_GetResponse>
 8004e34:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	0c1b      	lsrs	r3, r3, #16
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e011      	b.n	8004e72 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e5c:	e009      	b.n	8004e72 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e6c:	e001      	b.n	8004e72 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd90      	pop	{r4, r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	10624dd3 	.word	0x10624dd3

08004e84 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004e84:	b490      	push	{r4, r7}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e8c:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <SDMMC_GetCmdResp7+0x90>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a21      	ldr	r2, [pc, #132]	; (8004f18 <SDMMC_GetCmdResp7+0x94>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	0a5b      	lsrs	r3, r3, #9
 8004e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004ea0:	4623      	mov	r3, r4
 8004ea2:	1e5c      	subs	r4, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ea8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004eac:	e02c      	b.n	8004f08 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <SDMMC_GetCmdResp7+0x1c>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1eb      	bne.n	8004ea0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d004      	beq.n	8004ede <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004eda:	2304      	movs	r3, #4
 8004edc:	e014      	b.n	8004f08 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e009      	b.n	8004f08 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2240      	movs	r2, #64	; 0x40
 8004f04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004f06:	2300      	movs	r3, #0
  
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc90      	pop	{r4, r7}
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000000 	.word	0x20000000
 8004f18:	10624dd3 	.word	0x10624dd3

08004f1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004f20:	4904      	ldr	r1, [pc, #16]	; (8004f34 <MX_FATFS_Init+0x18>)
 8004f22:	4805      	ldr	r0, [pc, #20]	; (8004f38 <MX_FATFS_Init+0x1c>)
 8004f24:	f000 fc72 	bl	800580c <FATFS_LinkDriver>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <MX_FATFS_Init+0x20>)
 8004f2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004f30:	bf00      	nop
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	2000053c 	.word	0x2000053c
 8004f38:	08005a14 	.word	0x08005a14
 8004f3c:	20000538 	.word	0x20000538

08004f40 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004f4a:	f000 f86b 	bl	8005024 <BSP_SD_IsDetected>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d001      	beq.n	8004f58 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e005      	b.n	8004f64 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004f58:	4804      	ldr	r0, [pc, #16]	; (8004f6c <BSP_SD_Init+0x2c>)
 8004f5a:	f7fd fed7 	bl	8002d0c <HAL_SD_Init>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8004f62:	79fb      	ldrb	r3, [r7, #7]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	200003c0 	.word	0x200003c0

08004f70 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	4806      	ldr	r0, [pc, #24]	; (8004fa8 <BSP_SD_ReadBlocks+0x38>)
 8004f8e:	f7fd ff4d 	bl	8002e2c <HAL_SD_ReadBlocks>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	200003c0 	.word	0x200003c0

08004fac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	68f9      	ldr	r1, [r7, #12]
 8004fc8:	4806      	ldr	r0, [pc, #24]	; (8004fe4 <BSP_SD_WriteBlocks+0x38>)
 8004fca:	f7fe f927 	bl	800321c <HAL_SD_WriteBlocks>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200003c0 	.word	0x200003c0

08004fe8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004fec:	4805      	ldr	r0, [pc, #20]	; (8005004 <BSP_SD_GetCardState+0x1c>)
 8004fee:	f7fe fc85 	bl	80038fc <HAL_SD_GetCardState>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	bf14      	ite	ne
 8004ff8:	2301      	movne	r3, #1
 8004ffa:	2300      	moveq	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	200003c0 	.word	0x200003c0

08005008 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4803      	ldr	r0, [pc, #12]	; (8005020 <BSP_SD_GetCardInfo+0x18>)
 8005014:	f7fe fc46 	bl	80038a4 <HAL_SD_GetCardInfo>
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	200003c0 	.word	0x200003c0

08005024 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800502a:	2301      	movs	r3, #1
 800502c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	b2db      	uxtb	r3, r3
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800504a:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <SD_CheckStatus+0x38>)
 800504c:	2201      	movs	r2, #1
 800504e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005050:	f7ff ffca 	bl	8004fe8 <BSP_SD_GetCardState>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d107      	bne.n	800506a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800505a:	4b07      	ldr	r3, [pc, #28]	; (8005078 <SD_CheckStatus+0x38>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	b2da      	uxtb	r2, r3
 8005066:	4b04      	ldr	r3, [pc, #16]	; (8005078 <SD_CheckStatus+0x38>)
 8005068:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800506a:	4b03      	ldr	r3, [pc, #12]	; (8005078 <SD_CheckStatus+0x38>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	b2db      	uxtb	r3, r3
}
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000009 	.word	0x20000009

0800507c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005086:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <SD_initialize+0x38>)
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800508c:	f7ff ff58 	bl	8004f40 <BSP_SD_Init>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d107      	bne.n	80050a6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff ffd1 	bl	8005040 <SD_CheckStatus>
 800509e:	4603      	mov	r3, r0
 80050a0:	461a      	mov	r2, r3
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <SD_initialize+0x38>)
 80050a4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80050a6:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <SD_initialize+0x38>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b2db      	uxtb	r3, r3
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20000009 	.word	0x20000009

080050b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff ffbb 	bl	8005040 <SD_CheckStatus>
 80050ca:	4603      	mov	r3, r0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4603      	mov	r3, r0
 80050e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80050e8:	f04f 33ff 	mov.w	r3, #4294967295
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	68b8      	ldr	r0, [r7, #8]
 80050f2:	f7ff ff3d 	bl	8004f70 <BSP_SD_ReadBlocks>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d107      	bne.n	800510c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80050fc:	bf00      	nop
 80050fe:	f7ff ff73 	bl	8004fe8 <BSP_SD_GetCardState>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1fa      	bne.n	80050fe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800510c:	7dfb      	ldrb	r3, [r7, #23]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b086      	sub	sp, #24
 800511a:	af00      	add	r7, sp, #0
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	4603      	mov	r3, r0
 8005124:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800512a:	f04f 33ff 	mov.w	r3, #4294967295
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	68b8      	ldr	r0, [r7, #8]
 8005134:	f7ff ff3a 	bl	8004fac <BSP_SD_WriteBlocks>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d107      	bne.n	800514e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800513e:	bf00      	nop
 8005140:	f7ff ff52 	bl	8004fe8 <BSP_SD_GetCardState>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1fa      	bne.n	8005140 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800514e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08c      	sub	sp, #48	; 0x30
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	603a      	str	r2, [r7, #0]
 8005162:	71fb      	strb	r3, [r7, #7]
 8005164:	460b      	mov	r3, r1
 8005166:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800516e:	4b25      	ldr	r3, [pc, #148]	; (8005204 <SD_ioctl+0xac>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <SD_ioctl+0x28>
 800517c:	2303      	movs	r3, #3
 800517e:	e03c      	b.n	80051fa <SD_ioctl+0xa2>

  switch (cmd)
 8005180:	79bb      	ldrb	r3, [r7, #6]
 8005182:	2b03      	cmp	r3, #3
 8005184:	d834      	bhi.n	80051f0 <SD_ioctl+0x98>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <SD_ioctl+0x34>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	0800519d 	.word	0x0800519d
 8005190:	080051a5 	.word	0x080051a5
 8005194:	080051bd 	.word	0x080051bd
 8005198:	080051d7 	.word	0x080051d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80051a2:	e028      	b.n	80051f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80051a4:	f107 030c 	add.w	r3, r7, #12
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff ff2d 	bl	8005008 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80051ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80051ba:	e01c      	b.n	80051f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80051bc:	f107 030c 	add.w	r3, r7, #12
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff ff21 	bl	8005008 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80051d4:	e00f      	b.n	80051f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff ff14 	bl	8005008 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	0a5a      	lsrs	r2, r3, #9
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80051ee:	e002      	b.n	80051f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80051f0:	2304      	movs	r3, #4
 80051f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80051f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3730      	adds	r7, #48	; 0x30
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000009 	.word	0x20000009

08005208 <CAN_SendMessage>:
void CAN3_setID(uint32_t ID) {
	CAN_setID(&bus3, ID);
}

/* Send ------------------------------------------------------------------*/
void CAN_SendMessage(uint8_t *ch, CANBus *bus) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
	if (bus->number != 0) {
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d017      	beq.n	800524a <CAN_SendMessage+0x42>
		xprintf("CAN%d: Nachricht wird gesendet: %s\n", bus->number, ch);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4619      	mov	r1, r3
 8005222:	480d      	ldr	r0, [pc, #52]	; (8005258 <CAN_SendMessage+0x50>)
 8005224:	f000 fa94 	bl	8005750 <xprintf>
		HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(bus->hcan,
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	1d19      	adds	r1, r3, #4
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	3338      	adds	r3, #56	; 0x38
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	f7fb ffb2 	bl	800119e <HAL_CAN_AddTxMessage>
 800523a:	4603      	mov	r3, r0
 800523c:	73fb      	strb	r3, [r7, #15]
				&(bus->pTxHeader), ch, &(bus->TxMailbox));
		xprintf("Nachricht wurde gesendet mit Status: %d\n\n", status);
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	4619      	mov	r1, r3
 8005242:	4806      	ldr	r0, [pc, #24]	; (800525c <CAN_SendMessage+0x54>)
 8005244:	f000 fa84 	bl	8005750 <xprintf>
	} else {
		xprintf("Bus nicht initialisiert.\n");
	}
}
 8005248:	e002      	b.n	8005250 <CAN_SendMessage+0x48>
		xprintf("Bus nicht initialisiert.\n");
 800524a:	4805      	ldr	r0, [pc, #20]	; (8005260 <CAN_SendMessage+0x58>)
 800524c:	f000 fa80 	bl	8005750 <xprintf>
}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	08005974 	.word	0x08005974
 800525c:	08005998 	.word	0x08005998
 8005260:	080059c4 	.word	0x080059c4

08005264 <CAN3_SendMessage>:

void CAN2_SendMessage(char *ch) {
	CAN_SendMessage((uint8_t*) ch, &bus2);
}

void CAN3_SendMessage(char *ch) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	CAN_SendMessage((uint8_t*) ch, &bus3);
 800526c:	4903      	ldr	r1, [pc, #12]	; (800527c <CAN3_SendMessage+0x18>)
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff ffca 	bl	8005208 <CAN_SendMessage>
}
 8005274:	bf00      	nop
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20000344 	.word	0x20000344

08005280 <CAN_ReceiveMessage>:

/* Receive ------------------------------------------------------------------*/
void CAN_ReceiveMessage(CANBus *bus) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	if (bus->number > 0) {
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <CAN_ReceiveMessage+0x26>
		HAL_CAN_GetRxMessage(bus->hcan, CAN_RX_FIFO0, &(bus->pRxHeader),
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f103 021c 	add.w	r2, r3, #28
				bus->receiveBuffer);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	333d      	adds	r3, #61	; 0x3d
		HAL_CAN_GetRxMessage(bus->hcan, CAN_RX_FIFO0, &(bus->pRxHeader),
 800529e:	2100      	movs	r1, #0
 80052a0:	f7fc f858 	bl	8001354 <HAL_CAN_GetRxMessage>
		bus->receiveBuffer[4] = 'N';
		bus->receiveBuffer[5] = 'U';
		bus->receiveBuffer[6] = 'L';
		bus->receiveBuffer[7] = 'L';
	}
}
 80052a4:	e025      	b.n	80052f2 <CAN_ReceiveMessage+0x72>
		xprintf("CAN is not initialized.\n");
 80052a6:	4815      	ldr	r0, [pc, #84]	; (80052fc <CAN_ReceiveMessage+0x7c>)
 80052a8:	f000 fa52 	bl	8005750 <xprintf>
		bus->receiveBuffer[0] = 'C';
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2243      	movs	r2, #67	; 0x43
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		bus->receiveBuffer[1] = 'A';
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2241      	movs	r2, #65	; 0x41
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		bus->receiveBuffer[2] = 'N';
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	224e      	movs	r2, #78	; 0x4e
 80052c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		bus->receiveBuffer[3] = 48 + bus->number;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	3330      	adds	r3, #48	; 0x30
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		bus->receiveBuffer[4] = 'N';
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	224e      	movs	r2, #78	; 0x4e
 80052d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		bus->receiveBuffer[5] = 'U';
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2255      	movs	r2, #85	; 0x55
 80052de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		bus->receiveBuffer[6] = 'L';
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	224c      	movs	r2, #76	; 0x4c
 80052e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		bus->receiveBuffer[7] = 'L';
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	224c      	movs	r2, #76	; 0x4c
 80052ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	080059e0 	.word	0x080059e0

08005300 <CAN_ReceiveForwardMessage>:

void CAN_ReceiveForwardMessage(unsigned char *message, CANBus *bus) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
	int i;
	CAN_ReceiveMessage(bus);
 800530a:	6838      	ldr	r0, [r7, #0]
 800530c:	f7ff ffb8 	bl	8005280 <CAN_ReceiveMessage>
	for (i = 0; i < 8; i++)
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	e00b      	b.n	800532e <CAN_ReceiveForwardMessage+0x2e>
		message[i] = bus->receiveBuffer[i];
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	440a      	add	r2, r1
 8005322:	323d      	adds	r2, #61	; 0x3d
 8005324:	7812      	ldrb	r2, [r2, #0]
 8005326:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b07      	cmp	r3, #7
 8005332:	ddf0      	ble.n	8005316 <CAN_ReceiveForwardMessage+0x16>
	message[i] = '\0'; // Adding "EndOfString"
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4413      	add	r3, r2
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <CAN3_ReceiveMessage>:

void CAN2_ReceiveMessage(unsigned char *message) {
	CAN_ReceiveForwardMessage(message, &bus2);
}

void CAN3_ReceiveMessage(unsigned char *message) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	CAN_ReceiveForwardMessage(message, &bus3);
 8005350:	4903      	ldr	r1, [pc, #12]	; (8005360 <CAN3_ReceiveMessage+0x18>)
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff ffd4 	bl	8005300 <CAN_ReceiveForwardMessage>
}
 8005358:	bf00      	nop
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000344 	.word	0x20000344

08005364 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	2b0a      	cmp	r3, #10
 8005372:	d102      	bne.n	800537a <xputc+0x16>
 8005374:	200d      	movs	r0, #13
 8005376:	f7ff fff5 	bl	8005364 <xputc>

	if (outptr) {		/* Destination is memory */
 800537a:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <xputc+0x48>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <xputc+0x2e>
		*outptr++ = (unsigned char)c;
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <xputc+0x48>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	4908      	ldr	r1, [pc, #32]	; (80053ac <xputc+0x48>)
 800538a:	600a      	str	r2, [r1, #0]
 800538c:	79fa      	ldrb	r2, [r7, #7]
 800538e:	701a      	strb	r2, [r3, #0]
		return;
 8005390:	e008      	b.n	80053a4 <xputc+0x40>
	}
	if (xfunc_out) {	/* Destination is device */
 8005392:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <xputc+0x4c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <xputc+0x40>
		xfunc_out((unsigned char)c);
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <xputc+0x4c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	79fa      	ldrb	r2, [r7, #7]
 80053a0:	4610      	mov	r0, r2
 80053a2:	4798      	blx	r3
	}
}
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000028 	.word	0x20000028
 80053b0:	200009a4 	.word	0x200009a4

080053b4 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	while (*str) {
 80053bc:	e006      	b.n	80053cc <xputs+0x18>
		xputc(*str++);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff ffcc 	bl	8005364 <xputc>
	while (*str) {
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f4      	bne.n	80053be <xputs+0xa>
	}
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b094      	sub	sp, #80	; 0x50
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
	unsigned long vs;
#endif


	for (;;) {
		c = *fmt++;					/* Get a format character */
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!c) break;				/* End of format? */
 80053f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 81a3 	beq.w	8005742 <xvprintf+0x366>
		if (c != '%') {				/* Pass it through if not a % sequense */
 80053fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005400:	2b25      	cmp	r3, #37	; 0x25
 8005402:	d005      	beq.n	8005410 <xvprintf+0x34>
			xputc(c); continue;
 8005404:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ffab 	bl	8005364 <xputc>
 800540e:	e197      	b.n	8005740 <xvprintf+0x364>
		}
		f = w = 0;					/* Clear parms */
 8005410:	2300      	movs	r3, #0
 8005412:	643b      	str	r3, [r7, #64]	; 0x40
 8005414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
		c = *fmt++;					/* Get first char of the sequense */
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	607a      	str	r2, [r7, #4]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (c == '0') {				/* Flag: left '0' padded */
 8005424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005428:	2b30      	cmp	r3, #48	; 0x30
 800542a:	d108      	bne.n	800543e <xvprintf+0x62>
			f = 1; c = *fmt++;
 800542c:	2301      	movs	r3, #1
 800542e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	607a      	str	r2, [r7, #4]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800543c:	e00b      	b.n	8005456 <xvprintf+0x7a>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800543e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005442:	2b2d      	cmp	r3, #45	; 0x2d
 8005444:	d107      	bne.n	8005456 <xvprintf+0x7a>
				f = 2; c = *fmt++;
 8005446:	2302      	movs	r3, #2
 8005448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 8005456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800545a:	2b2a      	cmp	r3, #42	; 0x2a
 800545c:	d126      	bne.n	80054ac <xvprintf+0xd0>
			n = va_arg(arp, int);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	1d1a      	adds	r2, r3, #4
 8005462:	603a      	str	r2, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	63bb      	str	r3, [r7, #56]	; 0x38
			if (n < 0) {			/* Flag: left justified */
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	2b00      	cmp	r3, #0
 800546c:	da04      	bge.n	8005478 <xvprintf+0x9c>
				n = 0 - n;
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	425b      	negs	r3, r3
 8005472:	63bb      	str	r3, [r7, #56]	; 0x38
				f = 2;
 8005474:	2302      	movs	r3, #2
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			w = n; c = *fmt++;
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	643b      	str	r3, [r7, #64]	; 0x40
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005488:	e018      	b.n	80054bc <xvprintf+0xe0>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 800548a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	461a      	mov	r2, r3
 8005496:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800549a:	4413      	add	r3, r2
 800549c:	3b30      	subs	r3, #48	; 0x30
 800549e:	643b      	str	r3, [r7, #64]	; 0x40
				c = *fmt++;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			while (c >= '0' && c <= '9') {	/* Minimum width */
 80054ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054b0:	2b2f      	cmp	r3, #47	; 0x2f
 80054b2:	d903      	bls.n	80054bc <xvprintf+0xe0>
 80054b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054b8:	2b39      	cmp	r3, #57	; 0x39
 80054ba:	d9e6      	bls.n	800548a <xvprintf+0xae>
			}
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long */
 80054bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054c0:	2b6c      	cmp	r3, #108	; 0x6c
 80054c2:	d003      	beq.n	80054cc <xvprintf+0xf0>
 80054c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054c8:	2b4c      	cmp	r3, #76	; 0x4c
 80054ca:	d109      	bne.n	80054e0 <xvprintf+0x104>
			f |= 4; c = *fmt++;
 80054cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ce:	f043 0304 	orr.w	r3, r3, #4
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	607a      	str	r2, [r7, #4]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (c == 'l' || c == 'L') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 80054e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 812e 	beq.w	8005746 <xvprintf+0x36a>
		d = c;
 80054ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (d >= 'a') d -= 0x20;
 80054f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80054f6:	2b60      	cmp	r3, #96	; 0x60
 80054f8:	d904      	bls.n	8005504 <xvprintf+0x128>
 80054fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80054fe:	3b20      	subs	r3, #32
 8005500:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		switch (d) {				/* Type is... */
 8005504:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005508:	3b42      	subs	r3, #66	; 0x42
 800550a:	2b16      	cmp	r3, #22
 800550c:	d873      	bhi.n	80055f6 <xvprintf+0x21a>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <xvprintf+0x138>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	080055df 	.word	0x080055df
 8005518:	080055cd 	.word	0x080055cd
 800551c:	080055eb 	.word	0x080055eb
 8005520:	080055f7 	.word	0x080055f7
 8005524:	080055f7 	.word	0x080055f7
 8005528:	080055f7 	.word	0x080055f7
 800552c:	080055f7 	.word	0x080055f7
 8005530:	080055f7 	.word	0x080055f7
 8005534:	080055f7 	.word	0x080055f7
 8005538:	080055f7 	.word	0x080055f7
 800553c:	080055f7 	.word	0x080055f7
 8005540:	080055f7 	.word	0x080055f7
 8005544:	080055f7 	.word	0x080055f7
 8005548:	080055e5 	.word	0x080055e5
 800554c:	080055f7 	.word	0x080055f7
 8005550:	080055f7 	.word	0x080055f7
 8005554:	080055f7 	.word	0x080055f7
 8005558:	08005571 	.word	0x08005571
 800555c:	080055f7 	.word	0x080055f7
 8005560:	080055eb 	.word	0x080055eb
 8005564:	080055f7 	.word	0x080055f7
 8005568:	080055f7 	.word	0x080055f7
 800556c:	080055f1 	.word	0x080055f1
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	603a      	str	r2, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
			for (j = 0; p[j]; j++) ;
 800557a:	2300      	movs	r3, #0
 800557c:	647b      	str	r3, [r7, #68]	; 0x44
 800557e:	e002      	b.n	8005586 <xvprintf+0x1aa>
 8005580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005582:	3301      	adds	r3, #1
 8005584:	647b      	str	r3, [r7, #68]	; 0x44
 8005586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800558a:	4413      	add	r3, r2
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f6      	bne.n	8005580 <xvprintf+0x1a4>
			while (!(f & 2) && j++ < w) xputc(' ');
 8005592:	e002      	b.n	800559a <xvprintf+0x1be>
 8005594:	2020      	movs	r0, #32
 8005596:	f7ff fee5 	bl	8005364 <xputc>
 800559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <xvprintf+0x1d4>
 80055a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	647a      	str	r2, [r7, #68]	; 0x44
 80055aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d8f1      	bhi.n	8005594 <xvprintf+0x1b8>
			xputs(p);
 80055b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055b2:	f7ff feff 	bl	80053b4 <xputs>
			while (j++ < w) xputc(' ');
 80055b6:	e002      	b.n	80055be <xvprintf+0x1e2>
 80055b8:	2020      	movs	r0, #32
 80055ba:	f7ff fed3 	bl	8005364 <xputc>
 80055be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	647a      	str	r2, [r7, #68]	; 0x44
 80055c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d8f6      	bhi.n	80055b8 <xvprintf+0x1dc>
			continue;
 80055ca:	e0b9      	b.n	8005740 <xvprintf+0x364>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	1d1a      	adds	r2, r3, #4
 80055d0:	603a      	str	r2, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fec4 	bl	8005364 <xputc>
 80055dc:	e0b0      	b.n	8005740 <xvprintf+0x364>
		case 'B' :					/* Binary */
			r = 2; break;
 80055de:	2302      	movs	r3, #2
 80055e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e2:	e00e      	b.n	8005602 <xvprintf+0x226>
		case 'O' :					/* Octal */
			r = 8; break;
 80055e4:	2308      	movs	r3, #8
 80055e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e8:	e00b      	b.n	8005602 <xvprintf+0x226>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80055ea:	230a      	movs	r3, #10
 80055ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ee:	e008      	b.n	8005602 <xvprintf+0x226>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80055f0:	2310      	movs	r3, #16
 80055f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f4:	e005      	b.n	8005602 <xvprintf+0x226>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 80055f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff feb2 	bl	8005364 <xputc>
 8005600:	e09e      	b.n	8005740 <xvprintf+0x364>
			} else {		/* int/short/char argument */
				v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 8005602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <xvprintf+0x23c>
			v = va_arg(arp, long);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	1d1a      	adds	r2, r3, #4
 8005610:	603a      	str	r2, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	633b      	str	r3, [r7, #48]	; 0x30
 8005616:	e00d      	b.n	8005634 <xvprintf+0x258>
		} else {		/* int/short/char argument */
			v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 8005618:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800561c:	2b44      	cmp	r3, #68	; 0x44
 800561e:	d104      	bne.n	800562a <xvprintf+0x24e>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	1d1a      	adds	r2, r3, #4
 8005624:	603a      	str	r2, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	e003      	b.n	8005632 <xvprintf+0x256>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	1d1a      	adds	r2, r3, #4
 800562e:	603a      	str	r2, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	633b      	str	r3, [r7, #48]	; 0x30
		}
#endif
		if (d == 'D' && v < 0) {	/* Negative value? */
 8005634:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005638:	2b44      	cmp	r3, #68	; 0x44
 800563a:	d109      	bne.n	8005650 <xvprintf+0x274>
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	2b00      	cmp	r3, #0
 8005640:	da06      	bge.n	8005650 <xvprintf+0x274>
			v = 0 - v; f |= 16;
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	425b      	negs	r3, r3
 8005646:	633b      	str	r3, [r7, #48]	; 0x30
 8005648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564a:	f043 0310 	orr.w	r3, r3, #16
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		i = 0; vs = v;
 8005650:	2300      	movs	r3, #0
 8005652:	64bb      	str	r3, [r7, #72]	; 0x48
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
		do {
			d = (char)(vs % r); vs /= r;
 8005658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800565c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005660:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005662:	fb01 f202 	mul.w	r2, r1, r2
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800566c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800566e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8005676:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800567a:	2b09      	cmp	r3, #9
 800567c:	d90b      	bls.n	8005696 <xvprintf+0x2ba>
 800567e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005682:	2b78      	cmp	r3, #120	; 0x78
 8005684:	d101      	bne.n	800568a <xvprintf+0x2ae>
 8005686:	2227      	movs	r2, #39	; 0x27
 8005688:	e000      	b.n	800568c <xvprintf+0x2b0>
 800568a:	2207      	movs	r2, #7
 800568c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005690:	4413      	add	r3, r2
 8005692:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			s[i++] = d + '0';
 8005696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	64ba      	str	r2, [r7, #72]	; 0x48
 800569c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80056a0:	3230      	adds	r2, #48	; 0x30
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80056a8:	440b      	add	r3, r1
 80056aa:	f803 2c48 	strb.w	r2, [r3, #-72]
		} while (vs != 0 && i < sizeof s);
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <xvprintf+0x2de>
 80056b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b6:	2b1f      	cmp	r3, #31
 80056b8:	d9ce      	bls.n	8005658 <xvprintf+0x27c>
		if (f & 16) s[i++] = '-';
 80056ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d008      	beq.n	80056d6 <xvprintf+0x2fa>
 80056c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80056ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80056ce:	4413      	add	r3, r2
 80056d0:	222d      	movs	r2, #45	; 0x2d
 80056d2:	f803 2c48 	strb.w	r2, [r3, #-72]
		j = i; d = (f & 1) ? '0' : ' ';
 80056d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d8:	647b      	str	r3, [r7, #68]	; 0x44
 80056da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <xvprintf+0x30c>
 80056e4:	2330      	movs	r3, #48	; 0x30
 80056e6:	e000      	b.n	80056ea <xvprintf+0x30e>
 80056e8:	2320      	movs	r3, #32
 80056ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!(f & 2) && j++ < w) xputc(d);
 80056ee:	e004      	b.n	80056fa <xvprintf+0x31e>
 80056f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fe35 	bl	8005364 <xputc>
 80056fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d105      	bne.n	8005710 <xvprintf+0x334>
 8005704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	647a      	str	r2, [r7, #68]	; 0x44
 800570a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800570c:	429a      	cmp	r2, r3
 800570e:	d8ef      	bhi.n	80056f0 <xvprintf+0x314>
		do xputc(s[--i]); while (i != 0);
 8005710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005712:	3b01      	subs	r3, #1
 8005714:	64bb      	str	r3, [r7, #72]	; 0x48
 8005716:	f107 0208 	add.w	r2, r7, #8
 800571a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571c:	4413      	add	r3, r2
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fe1f 	bl	8005364 <xputc>
 8005726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f1      	bne.n	8005710 <xvprintf+0x334>
		while (j++ < w) xputc(' ');
 800572c:	e002      	b.n	8005734 <xvprintf+0x358>
 800572e:	2020      	movs	r0, #32
 8005730:	f7ff fe18 	bl	8005364 <xputc>
 8005734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	647a      	str	r2, [r7, #68]	; 0x44
 800573a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800573c:	429a      	cmp	r2, r3
 800573e:	d8f6      	bhi.n	800572e <xvprintf+0x352>
		c = *fmt++;					/* Get a format character */
 8005740:	e651      	b.n	80053e6 <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <xvprintf+0x36c>
		if (!c) break;				/* End of format? */
 8005746:	bf00      	nop
	}
}
 8005748:	bf00      	nop
 800574a:	3750      	adds	r7, #80	; 0x50
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8005750:	b40f      	push	{r0, r1, r2, r3}
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8005758:	f107 0314 	add.w	r3, r7, #20
 800575c:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	6938      	ldr	r0, [r7, #16]
 8005762:	f7ff fe3b 	bl	80053dc <xvprintf>
	va_end(arp);
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005770:	b004      	add	sp, #16
 8005772:	4770      	bx	lr

08005774 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800578a:	4b1f      	ldr	r3, [pc, #124]	; (8005808 <FATFS_LinkDriverEx+0x94>)
 800578c:	7a5b      	ldrb	r3, [r3, #9]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d131      	bne.n	80057f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005794:	4b1c      	ldr	r3, [pc, #112]	; (8005808 <FATFS_LinkDriverEx+0x94>)
 8005796:	7a5b      	ldrb	r3, [r3, #9]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	4b1a      	ldr	r3, [pc, #104]	; (8005808 <FATFS_LinkDriverEx+0x94>)
 800579e:	2100      	movs	r1, #0
 80057a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80057a2:	4b19      	ldr	r3, [pc, #100]	; (8005808 <FATFS_LinkDriverEx+0x94>)
 80057a4:	7a5b      	ldrb	r3, [r3, #9]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	4a17      	ldr	r2, [pc, #92]	; (8005808 <FATFS_LinkDriverEx+0x94>)
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <FATFS_LinkDriverEx+0x94>)
 80057b4:	7a5b      	ldrb	r3, [r3, #9]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b13      	ldr	r3, [pc, #76]	; (8005808 <FATFS_LinkDriverEx+0x94>)
 80057bc:	4413      	add	r3, r2
 80057be:	79fa      	ldrb	r2, [r7, #7]
 80057c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80057c2:	4b11      	ldr	r3, [pc, #68]	; (8005808 <FATFS_LinkDriverEx+0x94>)
 80057c4:	7a5b      	ldrb	r3, [r3, #9]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	b2d1      	uxtb	r1, r2
 80057cc:	4a0e      	ldr	r2, [pc, #56]	; (8005808 <FATFS_LinkDriverEx+0x94>)
 80057ce:	7251      	strb	r1, [r2, #9]
 80057d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80057d2:	7dbb      	ldrb	r3, [r7, #22]
 80057d4:	3330      	adds	r3, #48	; 0x30
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	3301      	adds	r3, #1
 80057e0:	223a      	movs	r2, #58	; 0x3a
 80057e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	3302      	adds	r3, #2
 80057e8:	222f      	movs	r2, #47	; 0x2f
 80057ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	3303      	adds	r3, #3
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	2000002c 	.word	0x2000002c

0800580c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005816:	2200      	movs	r2, #0
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff ffaa 	bl	8005774 <FATFS_LinkDriverEx>
 8005820:	4603      	mov	r3, r0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <__libc_init_array>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	4e0d      	ldr	r6, [pc, #52]	; (8005864 <__libc_init_array+0x38>)
 8005830:	4c0d      	ldr	r4, [pc, #52]	; (8005868 <__libc_init_array+0x3c>)
 8005832:	1ba4      	subs	r4, r4, r6
 8005834:	10a4      	asrs	r4, r4, #2
 8005836:	2500      	movs	r5, #0
 8005838:	42a5      	cmp	r5, r4
 800583a:	d109      	bne.n	8005850 <__libc_init_array+0x24>
 800583c:	4e0b      	ldr	r6, [pc, #44]	; (800586c <__libc_init_array+0x40>)
 800583e:	4c0c      	ldr	r4, [pc, #48]	; (8005870 <__libc_init_array+0x44>)
 8005840:	f000 f820 	bl	8005884 <_init>
 8005844:	1ba4      	subs	r4, r4, r6
 8005846:	10a4      	asrs	r4, r4, #2
 8005848:	2500      	movs	r5, #0
 800584a:	42a5      	cmp	r5, r4
 800584c:	d105      	bne.n	800585a <__libc_init_array+0x2e>
 800584e:	bd70      	pop	{r4, r5, r6, pc}
 8005850:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005854:	4798      	blx	r3
 8005856:	3501      	adds	r5, #1
 8005858:	e7ee      	b.n	8005838 <__libc_init_array+0xc>
 800585a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800585e:	4798      	blx	r3
 8005860:	3501      	adds	r5, #1
 8005862:	e7f2      	b.n	800584a <__libc_init_array+0x1e>
 8005864:	08005a30 	.word	0x08005a30
 8005868:	08005a30 	.word	0x08005a30
 800586c:	08005a30 	.word	0x08005a30
 8005870:	08005a34 	.word	0x08005a34

08005874 <memset>:
 8005874:	4402      	add	r2, r0
 8005876:	4603      	mov	r3, r0
 8005878:	4293      	cmp	r3, r2
 800587a:	d100      	bne.n	800587e <memset+0xa>
 800587c:	4770      	bx	lr
 800587e:	f803 1b01 	strb.w	r1, [r3], #1
 8005882:	e7f9      	b.n	8005878 <memset+0x4>

08005884 <_init>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	bf00      	nop
 8005888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588a:	bc08      	pop	{r3}
 800588c:	469e      	mov	lr, r3
 800588e:	4770      	bx	lr

08005890 <_fini>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr
